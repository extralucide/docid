#!/usr/bin/env python 2.7.3## -*- coding: latin-1 -*-# -*- coding: utf-8 -*-"""This file generates a SCI, HCMR and CID with a format .docx (Word 2007) based on a specific template.1.0.0: [8th of August 2013 - O. App�r�]  First major revision.1.1.0: [16th of August 2013 - O. App�r�] Add system's name before item's name in title of CID                                         Add OLD parameter in config file for old CR workflow                                         Add time in CCB minutes filename                                         Add system's name in filename and Subject/Object of CCB minute                                         For CCB minutes generation, correction in calling of createCrStatus                                         Add CCB type "All"                                         Remove log column from the implemented CR table                                         Add log table information                                         Remove prefix before Change status before listing CRs into Word document                                         Add sw_src and hw_src option in config file (option type_src is obsolete but still managed)1.2.0: [26th of September 2013 - O. App�r�]                                         Manage no such file or directory error                                         Correct List CR for spectific item.                                         Replace HCMR by HCMR                                         Add th possibilty to select one or several baselines ofr HCMR generation                                         Main window is no more resizable                                         Remove <void> in items list1.2.1: [27th of September 2013 - O. App�r�]                                         Minor modifications:                                            - Enhancement of hyperlink toward word document created                                            - Scrollbar is set to bottom automatically1.3.0: [30th of September 2013 - O. App�r�]                                         Add EXCR listing with specific workflow                                         Add file log for CR listing                                         CR state selection is disabled if all CR type are selected.1.3.1: [1st of October 2013 - O. App�r�]                                         Add a "Clear" button for baseline selection.                                         Add a "Clear" button for release selection.1.4.0: [8th of October 2013 - O. App�r�]                                         Remove bug when listbox is empty and user click on it.                                         Add a checkbutton to select wether or not the log for CR is displayed.                                         Splt CR status to display a nicer output csv file when "List CR" button is clicked                                         Add selection attribute in CR query                                         Add A/C standards customization in config file to append release list. Comments in csv file skipped.                                         Add " Reload PN csv file" in menu "Home"1.5.0: [30th of October 2013 - O. App�r�]                                         Add software part number and make a link between part number, release and baseline.                                         Add a listbox for standard and part number.                                         Modify folder "Create CCB Minutes" by "Change Requests"                                         Modify folder "Create CID" by "Create configuration index document"                                         Add " Reload config file" in menu "Home"                                         Add "Save","Restore" function for CID generation                                         Add automatic start and default template selection                                         Split CR status like PLDCR_In_Analysis => PLDCR, In_Analysis                                         Add "Clear selection" button for project.                                         Add Baselne and Project display.                                         Add "Show baseline command"                                         Add frame baseline in Synergy command folder                                         Make a correction when only a baseline is selected for "Generate" and "List items" commands                                         Add "tasks" and  "CR" in source list1.5.1: [10th of December 2013 - O. App�r�]                                        Add list of items for project also                                        Add task status1.5.2: [10th of December 2013 - O. App�r�]    Correction errors:    1)        File "docid.py", line 3731, in __getCR        AttributeError: 'ThreadQuery' object has no attribute 'getTypeWorkflow'        Move getTypeWorkflow from BuildDOc class in Interface class    2)        File "docid.py", line 2199, in getStatusAnalysis        AttributeError: BuildDoc instance has no attribute 'old_cr_workflow'    3)        File "docid.py", line 828, in openHLink_ccb        [Error 2] Le fichier sp�cifi� est introuvable: u'result\\result\\Dassault SMS PDS__CCB_TBD_1386668705.522000.docx'    Add 'Applicable Since' in combo box    Add log on/off ofr CCB report generation    Correct _getReleaseList, _getBaselineList and _GetProjectList1.5.3: [10th of December 2013 - O. App�r�]    Modify CCB report table width    Add "CR_functional_impact" attribute (attention c'est lent parce qu'on fait 1 requ�te par CR)1.6.0: [17th of December 2013 - O. App�r�]    Correct real time issues (thread lock)    Separate GUI from thread synergy treatments.1.6.1: [15th of January 2014 - O. App�r�]    Correct CR button disabled1.6.2: [27th of January 2014 - O. App�r�]    Correct minor bug    Display project list in Project set box aftre project update and enable Generate button for HCMR.1.6.3: [30th of January 2014 - O. App�r�]    Correct minor bug    Add an alert if template is not found1.6.4: [31st of January 2014 - O. App�r�]    Add HCMR selection for board    Add logrun function to display text without carriage return    Add DAL parameter on GUI1.6.5: [5th of February 2014 - O. App�r�]    Correct List items: First baseline then release    Add 'None' in CR attribute set listbox1.7.0: [19th of February 2014 - O. App�r�]    Refactor CID generation code2.0.0: [1st of April 2014 - O. App�r�]    History can be mase on documents    History take into account multiple CR linked to an item    Login interface calling corrected2.1.0: [7th of April 2014 - O. App�r�]    Add a progress bar for CID generation    Correct Synergy status command    add "CLOSE_SESSION" command launched by pressiog CTRL + X    Correct getArticles with cvtype extra "and"    move "replaceTag" function in Tool class    create the function _compareReleaseName    Correct _getCR function    Add CR ID association wit htasks    PR 001 (Implemented): Correct if "Clear selection" is pressed reset CR implemented in release: impact unsetRelease function                            If release is "None" then "CR_implemented_for" attribute has to be discarded in CR query.    PR 002 (Implemented): Correct functional/operational impact paragraph generation    PR 003 (Entered): Correct tag parsing with docx python library patch    PR 004 (Implemented): Correct _startSession in case CI ID is unknown2.1.1: [10th of April 2014 - O. App�r�]    Correct color of GUI    Correct BuilDoc _loadConfig function    Move picture_add to Tool class2.1.2: [05th of May 2014 - O. App�r�]    Add "-ts all_tasks" after "task" synergy command    Correct database identification with item selection    Add in Tool class get_sys_item_database and get_ci_sys_item_identification    Add button to clear "detected on" and "implemented for" field2.2.0: [12th of May 2014 - O. App�r�]    Convert "ID" in lower case to avoid Excel to detect SYLK format instead of "csv" format    Add column "old_worlflow" in table "item" in SQLite database and manage automatically SPR    Correct SPR query    Add "Invalid role" log error.    Add "finduse" command skip and correct CID generation if finduse command is not used    Manage several "implemented for" or "detected on" releaseManage several "implemented for" or "detected on" release2.2.1: [12th of May 2014 - O. App�r�]    Correct starting session if no password is entered2.2.2: [12th of May 2014 - O. App�r�]   Add impl_release in docid.ini and correct release initialisation2.3.0: [15th of May 2014 - O. App�r�]    PR 005 (Implemented) Disable old worlkflow display and correct other stuffs like get_sys_item_old_workflow function    PR 006 (Implemented) Correct set project list is a new baseline is selected    Correct previous baseline and add previous baseline/release in IHM    Remove CCB reference    Add function _getReference to find default reference in filename    Add protocol and data interface compatibility index    Add log into a file    Add flag for CCB minutes generation    Display list of CR in listbox when clicking on "List CR" button    getPR_CCB in BuildDoc class is reworked completely    Add cr_checklist table in SQLite database for CCB minutes generation    Add mix type in method replaceTag of class Tool2.3.1: [15th of May 2014 - O. App�r�]    Correct CR domain assignement in CCB report    Index of Extract SCR when exceeding 'z' become 'aa' etc. otherwise CR cannot exceed 26    Adapt severity list for PLD2.4.0: [19th of May 2014 - O. App�r�]    Make correlation with selected item and component and CR_type    Add components, link_items_components tables in SQLite database    Add components listbox in GUI according to selected item    Adapt CCB template for PLDCR and HCR    Select automatically the righ button according to the selected component2.4.1: [26th of May 2014 - O. App�r�]    Disable CR list entry which is read only    open web browser when double clicking on CR number in CR listbox    Update SQLite default database creation    Remove global variable interface and make software more maintanable    Make CLI version to invoke _getCR method and LIST_ITEMS(TBD)    Use <FocusOut> to update detect in and implemented for2.4.2: [28th of May 2014 - O. App�r�]    Correct bug <type 'exceptions.NameError'>: global name 'interface' is not defined    Correct bug ValueError: All strings must be XML compatible: Unicode or ASCII, no NULL bytes or control characters    Correct bug display page2.5.0: [05th of June 2014 - O. App�r�]    Add Plan Review and Software Conformity Review report generation    Increase "Change request found" listbox and add synopsis wih color enhancement and mousewheel effect    PR 003 (Implemented): Correct tag parsing with docx python library patch    docx export with replace tag for checklist for CCB does not wok anymmore2.5.1: [06th of June 2014 - O. App�r�]    Create action items database for CCB  minutes    *** Make query on MySQL database and actions table via mysqld ?    *** Ajouter Information CR    docx export with replace tag for checklist for CCB does not wok anymmore2.5.2: [09th of June 2014 - O. App�r�]    Correct bug in python-docx module and now checklist export works    Manage action items database for CCB minutes2.6.0: [26th of June 2014 - O. App�r�]    Refactor actions management by creating action_gui.py    Use tkintertable to display actions2.6.1: [27th of June 2014 - O. App�r�]    Add checklists from SQLite database for reviewsTODO:    Make sub function in class    Hyperlink target is lost by the new hyperlink created. Need an history of hyperlink    Create class Change    Create folder for reviews ?    Add default doc in SQLite database    Mieux g�rer les erreurs remont�es par Synergy dans _ccmCmd. Voir _getSessionStatus    besoin de filtrer les objets par projet (avec la version aussi)    Add a folder "Parameters" with "Old workflow" selection for instance    Comma in synopsis of CR disturb csv output file formatting    Correct thread error (TClError exception etc.)"""from synergy_thread import ThreadQuery__author__ = "O. Appere <olivier.appere@gmail.com>"__date__ = "27th of June 2014"__version__ = "rev 2.6.1"import loggingimport syssys.path.append("python-docx")from tool import Toolfrom actions_gui import ActionGui#import csvtry:    from Tkinter import *##    import Tkinter              # Python 2    import ttkexcept ImportError:    from tkinter import *##    import tkinter as Tkinter   # Python 3    import tkinter.ttk as ttkimport tkMessageBoxtry:    import docxexcept ImportError:    print "DoCID requires the python-docx library for Python. " \            "See https://github.com/mikemaccana/python-docx/"                #    raise ImportError, "DoCID requires the python-docx library for Python. " \                #         "See https://github.com/mikemaccana/python-docx/"import timefrom ConfigParser import ConfigParserimport reimport csvimport Queuetry:    from PIL import Imageexcept ImportError:    try:        import Image    except ImportError:        print "DoCID requires the Image library for Python. "        print "No module Image loaded."try:    import Pmwexcept ImportError:    print "DoCID requires the Python MegaWidgets for Python. " \        "See http://sourceforge.net/projects/pmw/"            #raise ImportError, "DoCID requires the Python MegaWidgets for Python. " \            #             "See http://sourceforge.net/projects/pmw/"from reviews import Reviewgui_background_color = 'white' #'#E6D8AE' #'white' #gui_background_colorbackground = gui_background_color #gui_background_color #'grey50'foreground = 'black'count_project = 0count_baseline = 0count_release = 0class Logger(object):    def __init__(self,filename="log.txt"):        self.terminal = sys.stdout        self.log = open(filename, "w")    def write(self, message):        self.terminal.write(message)        self.log.write(message)    def __del__(self):        close(self.log)# -----------------------------------------------------------------------------# -----------------------------------------------------------------------------class Gui(Tool):    '''    Display the bottom of the GUI which is generic for all notebooks    Use interface as global (not good)    '''    def help(self):        self.help_window = Tk()        self.help_window.iconbitmap("qams.ico")        self.help_window.title("Help")        self.help_window.resizable(False,False)        readme_file = open('README.txt', 'r')        readme_text = readme_file.read()        readme_file.close()        help_frame = Frame(self.help_window, bg = '#80c0c0')        help_frame.pack()        scrollbar = Scrollbar(help_frame)        self.help_window.bind('<MouseWheel>', self.scrollEvent)        scrollbar.pack(side=RIGHT, fill=Y)        self.help_text = Text(help_frame,wrap=WORD, yscrollcommand=scrollbar.set, width = 100, height = 30)        self.help_text.pack()        scrollbar.config(command=self.help_text.yview)        self.help_text.insert(END, readme_text)        bou1 = Button(self.help_window, text='Quit', command = self.help_window.destroy)        bou1.pack(side=RIGHT)        self.help_window.mainloop()    def scrollEvent(self,event):        if event.delta >0:            # d�placement vers le haut            self.help_text.yview_scroll(-2,'units')        else:            # d�placement vers le bas            self.help_text.yview_scroll(2,'units')    def about(self):        tkMessageBox.showinfo("Make Configuration Index Document", "DoCID " + __version__ + "\n\n Written by Olivier Appere\nT�l:0155825104\nCourriel:olivier.appere@zodiacaerospace.com\n\n (c) Copyright 2013-2014")    def __init__(self,master,queue,system,item):        global gui_background_color        Tool.__init__(self)        width_output_log = 120        #        # Start GUI notebook definition        #        #notebook        notebook = Pmw.NoteBook(master)        notebook.pack(fill = 'both', expand = 1, padx = 10, pady = 10)        #        # Specific high panels        #        self.ihm = Interface(notebook,queue,system,item)        #        # Bottom common panel        #        bottom_frame = Frame(master)        bottom_frame.pack()        baseline_frame = Frame(bottom_frame)        baseline_frame.pack()        # Release        baseline_label = Label(baseline_frame, text='Standard/Part Number/Release applied:', fg=foreground,width=30,anchor=W,padx=20)        baseline_label.pack(side=LEFT)        release = self.ihm.getBaseline()        if release != "":            self.ihm.baseline_txt = Label(baseline_frame,text=release,width=25,anchor=W,padx=20)            self.ihm.button_select.configure(state=NORMAL)            self.ihm.button_list_history.configure(state=NORMAL)            self.ihm.button_list_items.configure(state=NORMAL)            self.ihm.button_list_tasks.configure(state=NORMAL)        else:            self.ihm.baseline_txt = Label(baseline_frame,text="None",width=25,anchor=W,padx=20)        self.ihm.baseline_txt.pack(side=LEFT)        # Synergy Baseline        baseline_synergy_label = Label(baseline_frame, text='Baseline applied:', fg=foreground,width=20,anchor=W,padx=20)        baseline_synergy_label.pack(side=LEFT)        baseline = self.ihm.baseline        if  baseline != "":            self.ihm.baseline_synergy_txt = Label(baseline_frame,text=baseline,width=25,anchor=W,padx=20)            self.ihm.button_list_tasks.configure(state=NORMAL)            self.ihm.button_list_items.configure(state=NORMAL)        else:            self.ihm.baseline_synergy_txt = Label(baseline_frame,text="None",width=25,anchor=W,padx=20)        self.ihm.baseline_synergy_txt.pack(side=LEFT)        #        # Project        #        project_label = Label(baseline_frame, text='Project applied:', fg=foreground,width=20,anchor=W,padx=20)        project_label.pack(side=LEFT)        project = self.ihm.project        if  project != "":            self.ihm.project_txt = Label(baseline_frame,text=project,width=25,anchor=W,padx=20)        else:            self.ihm.project_txt = Label(baseline_frame,text="None",width=25,anchor=W,padx=20)        self.ihm.project_txt.pack()        #        # CR        #        cr_frame = Label(bottom_frame,padx=2,pady=1,width=240,anchor=W)        cr_frame.pack()##        row_index += 1        detect_cr_txt = "CR detected in release " + self._splitComma(self.ihm.previous_release)        self.ihm.detect_cr = Label(cr_frame, text=detect_cr_txt, fg=foreground,width=80,anchor=W,padx=0)        self.ihm.detect_cr.pack(side=LEFT)##        self.detect_cr.grid(row = row_index, sticky='W')##        row_index += 1        text = self._splitComma(self.ihm.impl_release)        impl_cr_txt = "CR implemented for release " + text        self.ihm.impl_cr = Label(cr_frame, text=impl_cr_txt, fg=foreground,width=100,anchor=W,padx=0)        self.ihm.impl_cr.pack()##        self.impl_cr.grid(row = row_index, sticky='W')        if self.ihm.getStandard():            size_list_box=28            change_frame = LabelFrame(bottom_frame, text="From Docid database (.csv file)")            change_frame.pack(side=LEFT)            spare_frame = Frame(bottom_frame,width=30)            spare_frame.pack(side=LEFT)        else:            size_list_box=48        rel_bas_proj_frame = LabelFrame(bottom_frame, text="From Synergy configuration management system tool database",padx=5,pady=5)        rel_bas_proj_frame.pack()        #        # Project listbox        #        project_frame = LabelFrame(rel_bas_proj_frame,text="Project",bd=0)        project_frame.pack(side=RIGHT,ipadx=5,ipady=5)        sub_project_frame = Frame(project_frame)        sub_project_frame.pack()        self.ihm.projectlistbox = Listbox(sub_project_frame,height=6,width=size_list_box,exportselection=0,state=DISABLED,bg="gray")        self.ihm.projectlistbox.insert(END, "All")        self.ihm.vbar_4 = vbar_4 = Scrollbar(sub_project_frame, name="vbar_4")        self.ihm.vbar_4.pack(side=RIGHT, fill=Y)        vbar_4["command"] = self.ihm.projectlistbox.yview        self.ihm.projectlistbox["yscrollcommand"] = vbar_4.set        self.ihm.projectlistbox.bind("<ButtonRelease-1>", self.ihm.select_project)        self.ihm.projectlistbox.bind("<Key-Up>", lambda event, arg=self.ihm.projectlistbox: self.ihm.up_event(event, arg))        self.ihm.projectlistbox.bind("<Key-Down>", lambda event, arg=self.ihm.projectlistbox: self.ihm.down_event(event, arg))        self.ihm.button_find_projects = Button(project_frame, text='Update', state=DISABLED, command = self.ihm._find_projects)        self.ihm.button_set_baselines = Button(project_frame, text='Set', state=DISABLED, command = self.ihm.set_baselines)        self.ihm.button_clear_project = Button(project_frame, text='Clear selection', state=NORMAL, command = self.ihm.clear_project)        self.ihm.projectlistbox.pack()        self.ihm.button_find_projects.pack(side=RIGHT,fill=X,padx=5)        self.ihm.button_set_baselines.pack(side=LEFT,fill=X,padx=5)        self.ihm.button_clear_project.pack(side=LEFT,fill=X,padx=5)        #        # Baseline listbox        #        baseline_frame = LabelFrame(rel_bas_proj_frame, text="Baseline",bd=0)        baseline_frame.pack(side=RIGHT,ipadx=5,ipady=5)        sub_baseline_frame = Frame(baseline_frame)        sub_baseline_frame.pack()        self.ihm.baselinelistbox = Listbox(sub_baseline_frame,height=6,width=size_list_box,exportselection=0,state=DISABLED,bg="gray")        self.ihm.baselinelistbox.insert(END, "All")        self.ihm.vbar_5 = vbar_5 = Scrollbar(sub_baseline_frame, name="vbar_5")        self.ihm.vbar_5.pack(side=RIGHT, fill=Y)        vbar_5["command"] = self.ihm.baselinelistbox.yview        self.ihm.baselinelistbox["yscrollcommand"] = vbar_5.set        self.ihm.baselinelistbox.bind("<ButtonRelease-1>", self.ihm.select_baseline)        self.ihm.baselinelistbox.bind("<Key-Up>", lambda event, arg=self.ihm.baselinelistbox: self.ihm.up_event(event, arg))        self.ihm.baselinelistbox.bind("<Key-Down>", lambda event, arg=self.ihm.baselinelistbox: self.ihm.down_event(event, arg))        self.ihm.button_find_baselines = Button(baseline_frame, text='Update', state=DISABLED, command = self.ihm.find_baselines)        self.ihm.button_clear_baseline = Button(baseline_frame, text='Clear selection', state=NORMAL, command = self.ihm.clear_baselines)        self.ihm.baselinelistbox.pack()        self.ihm.button_find_baselines.pack(side=RIGHT,fill=X,padx=5)        self.ihm.button_clear_baseline.pack(side=LEFT,fill=X,padx=5)        #        # Release listbox        #        release_frame = LabelFrame(rel_bas_proj_frame,text="Release",bd=0)        release_frame.pack(side=RIGHT,ipadx=5,ipady=5)        sub_release_frame = Frame(release_frame)        sub_release_frame.pack()        self.ihm.releaselistbox = Listbox(sub_release_frame,height=6,width=size_list_box,exportselection=0,bg="gray")        self.ihm.vbar_3 = vbar_3 = Scrollbar(sub_release_frame, name="vbar_3")        self.ihm.vbar_3.pack(side=RIGHT, fill=Y)        vbar_3["command"] = self.ihm.releaselistbox.yview        self.ihm.releaselistbox["yscrollcommand"] = vbar_3.set        self.ihm.releaselistbox.bind("<ButtonRelease-1>", self.ihm.select_release)        self.ihm.releaselistbox.bind("<Key-Up>", lambda event, arg=self.ihm.releaselistbox: self.ihm.up_event(event, arg))        self.ihm.releaselistbox.bind("<Key-Down>", lambda event, arg=self.ihm.releaselistbox: self.ihm.down_event(event, arg))        self.ihm.button_find_releases = Button(release_frame, text='Update', state=DISABLED, command = self.ihm.find_releases)        self.ihm.active_release_var = IntVar()        self.ihm.check_release_active = Checkbutton(release_frame, text="Active", variable=self.ihm.active_release_var,fg=foreground,command=self.ihm.cb_active_release)        self.ihm.check_release_active.pack(side=LEFT)        self.ihm.button_clear_release = Button(release_frame, text='Clear selection', state=NORMAL, command = self.ihm.clear_releases)        self.ihm.releaselistbox.pack()        self.ihm.button_find_releases.pack(side=RIGHT,fill=X,padx=5)        self.ihm.button_clear_release.pack(side=LEFT,fill=X,padx=5)        self.ihm.display_release()        if self.ihm.getStandard():            #            # Part number            #            pn_frame = LabelFrame(change_frame, text="Part Number",bd=0)            pn_frame.pack(side=RIGHT,ipadx=5,ipady=5)            sub_pn_frame = Frame(pn_frame)            sub_pn_frame.pack()            self.ihm.pnlistbox = Listbox(sub_pn_frame,height=6,width=size_list_box,exportselection=0,bg="gray")            self.ihm.vbar_pn = vbar_pn = Scrollbar(sub_pn_frame, name="vbar_pn")            self.ihm.vbar_pn.pack(side=RIGHT, fill=Y)            vbar_pn["command"] = self.ihm.pnlistbox.yview            self.ihm.pnlistbox["yscrollcommand"] = vbar_pn.set            self.ihm.pnlistbox.bind("<ButtonRelease-1>", self.ihm.select_partnumber)            self.ihm.pnlistbox.bind("<Key-Up>", lambda event, arg=self.ihm.pnlistbox: self.ihm.up_event(event, arg))            self.ihm.pnlistbox.bind("<Key-Down>", lambda event, arg=self.ihm.pnlistbox: self.ihm.down_event(event, arg))            self.ihm.pnlistbox.pack()            self.ihm.display_partnumber()            #            # Standard            #            standard_frame = LabelFrame(change_frame, text="Standard",bd=0)            standard_frame.pack(side=RIGHT,ipadx=5,ipady=5)            sub_standard_frame = Frame(standard_frame)            sub_standard_frame.pack()            self.ihm.stdlistbox = Listbox(sub_standard_frame,height=6,width=size_list_box,exportselection=0,bg="gray")            self.ihm.vbar_std = vbar_std = Scrollbar(sub_standard_frame, name="vbar_std")            self.ihm.vbar_std.pack(side=RIGHT, fill=Y)            vbar_std["command"] = self.ihm.stdlistbox.yview            self.ihm.stdlistbox["yscrollcommand"] = vbar_std.set            self.ihm.stdlistbox.bind("<ButtonRelease-1>", self.ihm.select_standard)            self.ihm.stdlistbox.bind("<Key-Up>", lambda event, arg=self.ihm.stdlistbox: self.ihm.up_event(event, arg))            self.ihm.stdlistbox.bind("<Key-Down>", lambda event, arg=self.ihm.stdlistbox: self.ihm.down_event(event, arg))            self.ihm.stdlistbox.pack()            self.ihm.display_standard()        #        # Output log        #        general_output_frame = Frame(master)        general_output_frame.pack(ipadx=5,ipady=5)        sub_general_output_frame = Frame(general_output_frame)        sub_general_output_frame.pack()        self.ihm.log_scrollbar = log_scrollbar = Scrollbar(sub_general_output_frame)        self.ihm.log_scrollbar.pack(side=RIGHT, fill=Y)        self.ihm.general_output_txt = Text(sub_general_output_frame,wrap=WORD, width = width_output_log, height = 8,fg='green',bg='black')        self.ihm.log_scrollbar["command"] = self.ihm.general_output_txt.yview        self.ihm.general_output_txt["yscrollcommand"] = log_scrollbar.set        self.ihm.general_output_txt.bind("<MouseWheel>", self.ihm.log_scrollEvent)        self.ihm.general_output_txt.bind("<Key-Up>", self.ihm.log_upEvent)        self.ihm.general_output_txt.bind("<Key-Down>", self.ihm.log_downEvent)        self.ihm.general_output_txt.pack()        progress_bar_frame = Frame(general_output_frame, width=400, height=10)        progress_bar_frame.pack(ipadx=5,ipady=5)        # Clear        self.ihm.button_clear = Button(progress_bar_frame, text='Clear', command = self.ihm.click_clear)        self.ihm.button_clear.pack(side=LEFT,padx=0,pady=10)        # progress bar        self.ihm.pb_vd = ttk.Progressbar(progress_bar_frame, orient='horizontal', mode='indeterminate',length = 200)        self.ihm.pb_vd.pack(expand=True, fill=BOTH, padx=300,pady=10, side=LEFT)        self.ihm.pb_vd.pack_forget()        self.ihm.success = Label(progress_bar_frame, text='', fg='red',width=150)        self.ihm.success.pack(expand=True, fill=BOTH, padx=5,pady=10, side=LEFT)        # Quit        self.ihm.button_quit = Button(progress_bar_frame, text='Quit', command = self.ihm.click_quit)        self.ihm.button_quit.pack(side=RIGHT,padx=0,pady=10)        notebook.tab('Create configuration index document').focus_set()        # Important pour que le notebook ai la taille du frame        notebook.setnaturalsize()        self.ihm.setBaseline(release)        self.ihm.setBaselineSynergy(baseline)        self.ihm.setProject(project)        #        # End GUI notebook definition        #class Login (Frame,Tool):    def _readConfig(self):        '''         Read csv config file        '''        # read config file        config_parser = ConfigParser()        config_parser.read('docid.ini')        try:            self.login = config_parser.get("User","login")            self.password = config_parser.get("User","password")            if config_parser.has_section("Default"):                self.system = self.getOptions("Default","system")                self.item = self.getOptions("Default","item")                start = self.getOptions("Default","start")                if start == "auto":                    self.auto_start = True                else:                    self.auto_start = False        except IOError as exception:            print "Config reading failed:", exception    def __init__(self, fenetre, **kwargs):        '''        init login class             - create GUI             - invoke sqlite query SELECT name FROM systems ORDER BY systems.name ASC                 to populate system listbox        '''        global background        global foreground        global system        global item        Tool.__init__(self)        self.auto_start = False        self.system = ""        self.item = ""        self.item_id = ()        # read config file        self._readConfig()        system = self.system        item = self.item        # Create widgets        entry_size = 30        # Create top frame, with scrollbar and listbox        Frame.__init__(self, fenetre, width=768, height=576,relief =GROOVE,**kwargs)        self.pack(fill=BOTH,ipady=10)        all_frame = Frame(self)        all_frame.pack(side=LEFT);        login_frame = Frame(all_frame)        login_frame.pack();        # Login        self.login_txt = Label(login_frame, text='Login:', fg=foreground,justify=LEFT)        self.login_entry = Entry(login_frame, state=NORMAL,width=20)        self.login_entry.insert(END, self.login)        self.login_txt.pack(side=LEFT)        self.login_entry.pack()        # Password        password_frame = Frame(all_frame)        password_frame.pack();        self.password_txt = Label(password_frame, text='Password:', fg=foreground,justify=LEFT)        self.password_entry = Entry(password_frame, state=NORMAL,width=17)        self.password_entry.configure(show='*')        self.password_entry.insert(END, self.password)        self.password_txt.pack(side=LEFT)        self.password_entry.pack(fill=X,ipadx=0)        #Systems        system_frame = Frame(all_frame)        system_frame.pack()        self.listbox_txt = Label(system_frame, text='Systems:', fg=foreground,width=40,anchor=W,padx=20)        self.listbox_frame = Frame(system_frame)        self.vbar_1 = vbar_1 = Scrollbar(self.listbox_frame, name="vbar_1")        self.vbar_1.pack(side=RIGHT, fill=Y)        self.listbox = Listbox(self.listbox_frame,height=6,width=entry_size,exportselection=0,yscrollcommand=vbar_1.set)        self.listbox.pack()        self.populate_listbox('SELECT name FROM systems ORDER BY systems.name ASC',self.listbox,"None")        # Tie listbox and scrollbar together        vbar_1["command"] = self.listbox.yview        # Bind events to the list box        self.listbox.bind("<ButtonRelease-1>", self.select_system)        self.listbox.bind("<Key-Up>", lambda event, arg=self.listbox: self.up_event(event, arg))        self.listbox.bind("<Key-Down>", lambda event, arg=self.listbox: self.down_event(event, arg))        self.listbox_txt.pack()        self.listbox_frame.pack()        self.vbar_1.pack()        # Items        self.items_txt = Label(system_frame, text='Items:', fg=foreground,width=40,anchor=W,padx=20)        self.itemslistbox_frame = Frame(system_frame)        self.vbar_2 = vbar_2 = Scrollbar(self.itemslistbox_frame , name="vbar_2")        self.vbar_2.pack(side=RIGHT, fill=Y)        self.itemslistbox = Listbox(self.itemslistbox_frame ,height=3,width=entry_size,exportselection=0,yscrollcommand=vbar_2.set)        self.itemslistbox.pack()        self.itemslistbox.insert(END, "All")        vbar_2["command"] = self.itemslistbox.yview        self.itemslistbox.bind("<ButtonRelease-1>", self.select_item)        self.itemslistbox.bind("<Key-Up>", lambda event, arg=self.itemslistbox: self.up_event(event, arg))        self.itemslistbox.bind("<Key-Down>", lambda event, arg=self.itemslistbox: self.down_event(event, arg))        self.items_txt.pack()        self.itemslistbox_frame.pack()        self.vbar_2.pack()        #Drawing        self.can = Canvas(self, width =64, height =196, highlightthickness=0)        bitmap = PhotoImage(file="img/doc.gif")        try:            self.can.create_image(32,32,image =bitmap)            self.can.bitmap = bitmap        except TclError as exception:            print "TCL error:", exception        self.can.pack(fill=Y,pady=20)        # Build & Quit        self.button_select = Button(self, text='OK', state=DISABLED, command = self.click_select)        self.button_quit = Button(self, text='Quit', command = self.click_quit)        self.button_select.pack(side=LEFT)        self.button_quit.pack(side=LEFT)    def changeColour(self, colour):        print 'Colour: ' + colour        self.listbox_txt.configure(background = colour)    def select_item(self, event):        ''' select item '''        item_id = self.itemslistbox.curselection()        self.item_id = item_id    def select_system(self, event):        self.button_select.configure(state=NORMAL)        # populate items listbox        system_id = self.listbox.curselection()        if system_id != () and '0' not in system_id:            self.system = self.listbox.get(system_id)            # Populate items list box            query = 'SELECT items.name FROM items LEFT OUTER JOIN link_systems_items ON items.id = link_systems_items.item_id LEFT OUTER JOIN systems ON systems.id = link_systems_items.system_id WHERE systems.name LIKE \'' + self.system + '\' ORDER BY items.name ASC'            self.populate_listbox(query,self.itemslistbox,"All")            self.listbox.activate(system_id)        else:            pass##            self.itemslistbox.delete(0, END)    def press_start_apache(self,event):        config= "httpd_ece.conf"        self.apache_start(config)        pass    def press_bypass_start_session(self,event):        '''        Bypass login. No message START_SESSION sent.        '''        global login_success        global login        global password        global no_start_session        global system        global item        global item_id        if self.system != "":            system = self.system        else:            system = ""        if self.item_id != () and '0' not in self.item_id:            item = self.itemslistbox.get(self.item_id)            item_id = self.item_id        else:            item=""            item_id=()        login_success = True        login = ""        password = ""##        no_start_session = True        self.destroy()        login_window.destroy()    def click_bypass(self):        global login_success        global login        global password        global item        global item_id        global system        system = self.system        # Get login and password information        login = self.login        password = self.password        item_id=()        login_success = True        self.destroy()    def click_select(self):        '''         Click OK button and launch the doCID GUI        '''        global login_success        global login        global password        global item        global item_id        global system        system = self.system        # Get login and password information        login = self.login_entry.get()        if login =="":            login = "anonymous"        password = self.password_entry.get()        if password == "":            password = "password"        if self.item_id != () and '0' not in self.item_id:            item = self.itemslistbox.get(self.item_id)            item_id = self.item_id        else:            item=""            item_id=()        login_success = True        self.destroy()        login_window.destroy()    def click_quit(self):        if tkMessageBox.askokcancel("Quit", "Do you really want to quit now?"):            self.destroy()            login_window.destroy()    def changeColour(self, colour):        print 'Colour: ' + colour        self.target.configure(background = colour)    def changeText(self, text):        print 'Text: ' + text        self.target.configure(text = text)class Interface (Frame,Tool,Review,ActionGui):    def resetReleaseListbox(self):        self.releaselistbox.delete(0, END)        self.releaselistbox.configure(bg="gray")        self.releaselistbox.configure(state=DISABLED)    def resetBaselineListbox(self):        self.baselinelistbox.delete(0, END)        self.baselinelistbox.configure(bg="gray")        self.baselinelistbox.configure(state=DISABLED)    def resetProjectListbox(self):        self.projectlistbox.delete(0, END)        try:            self.projectlistbox.configure(bg="gray")            self.projectlistbox.configure(state=DISABLED)        except TclError as exception:            print "TCL Error:", exception    def _find_projects(self):        self.projectlistbox.delete(0, END)        self.projectlistbox.insert(END, "Looking for projects ...")        self.projectlistbox.configure(state=NORMAL)        self.projectlistbox.delete(0, END)        self.log("Get available projects...")        self.queue.put("GET_PROJECTS") # action to get projects    def find_baselines(self):        self.baselinelistbox.delete(0, END)        self.baselinelistbox_1.delete(0, END)        self.baselinelistbox_2.delete(0, END)        #self._resetProjectListbox()        self.baselinelistbox.configure(state=NORMAL)        self.baselinelistbox.delete(0, END)        self.baselinelistbox.insert(END, "Looking for baselines ...")        if self.session_started:            self.log("Get available baselines ...")            self.queue.put("GET_BASELINES") # action to get baselines            self.baseline = "All"        else:            self.log("No session started.")    def find_releases(self):        '''         Display Synergy releases or from file  in the GUI        '''        # Display release        self.releaselistbox.delete(0, END)        self.releaselistbox.insert(END, "Looking for releases ...")        list_releases = []        if self.partnumber not in ("All","") or self.standard not in ("All",""):            if self.dico_list_pn != {}:                self.releaselistbox.delete(0, END)                if self.partnumber not in ("All",""):                    self.releaselistbox.insert(END, "All")                    if self.dico_pn_vs_rl.has_key(self.partnumber):                        list_releases = self.dico_pn_vs_rl[self.partnumber]                        for release in self.dico_pn_vs_rl[self.partnumber]:                            self.releaselistbox.insert(END, release)                else:                    # Display all releases                    self.display_release()                self.releaselistbox.configure(bg="white")                self.releaselistbox.selection_set(first=0)        else:            # Get list of releases from Synergy            self.queue.put("GET_RELEASES") # action to get releases            regexp = self.release_regexp #'^SW_(.*)/(.*)$'            self.queue.put(regexp)    def select_baseline(self, event):##        self.releaselistbox.configure(state=DISABLED)##        self.baselinelistbox.configure(state=DISABLED)        self.clear_project()        index = self.baselinelistbox.curselection()        if index in (0,()):            self.baseline = ""            self.setBaselineSynergy(self.baseline)        else:            self.baseline = self.baselinelistbox.get(index)            if self.baseline == "All":                self.setBaselineSynergy("None")                self.log("All baselines selected")            else:                self.setBaselineSynergy(self.baseline)                self.log("Selected baseline: " + self.baseline)                self.projectlistbox.configure(state=NORMAL)                self.button_find_projects.configure(state=NORMAL)##                self.button_select.configure(state=NORMAL)                self.button_list_items.configure(state=NORMAL)                self.button_list_tasks.configure(state=NORMAL)                self._find_release_vs_baseline()##            self._find_projects()    def select_release(self, event):        global session_started        self.clear_baselines()        self.clear_project()        index = self.releaselistbox.curselection()        if index in (0,()):            self.release = ""            self.log("All releases selected")            self.setBaseline("None")        else:##            interface.button_select.configure(state=NORMAL)            self.release = self.releaselistbox.get(index)            if self.release == "All":                self.setBaseline("None")                self.log("All releases selected")            else:                self.log("Selected release: " + self.release)                self.setBaseline(self.release)                self.button_select.configure(state=NORMAL)                self.button_list_items.configure(state=NORMAL)                self.button_list_tasks.configure(state=NORMAL)##        self.general_output_txt.see(END)##        if session_started:##            self.releaselistbox.configure(state=DISABLED)##            self.find_baselines()    def select_project(self, event):        global list_projects        index = self.projectlistbox.curselection()        if index in (0,()):            project = ""            self.setProject("None")        else:            project = self.projectlistbox.get(index)            if project == "All":                self.setProject("All")                self.log("All projects selected")            else:                self.setProject(project)                list_projects = []                self.button_select.configure(state=NORMAL)                self.button_list_items.configure(state=NORMAL)                self.button_list_tasks.configure(state=NORMAL)                self.log("Selected project: " + project)        self.project = project    def set_baselines(self):        '''        Called when set project is clicked        - Update self.project_list array with [release,baseline,project]        - UPdate baseline_set_box listbox with project name        '''        if self.project == "All":            if tkMessageBox.showinfo("All projects not accepted", "Please select one project."):                self.log("No project selected.")        elif self.project != "":            project = self.project            release = self.release            baseline = self.baseline            self.project_list.append([release,baseline,project])##            self.release_list.append(release)##            self.baseline_list.append(baseline)            self.baseline_set_box.insert(END, project)        else:            if tkMessageBox.showinfo("Missing project selection", "Please select a project."):                self.log("No project selected.")    def setBaseline(self,release):        '''         set CM Synergy release        '''        self.baseline_change = release        self.release = release        self.baseline_txt.configure(text=release)        self.release_entry.delete(0,END)        self.release_entry.insert(END, release)        self.impl_cr.configure(text="CR implemented for release " + self._splitComma(self.impl_release))        self.list_items_explain.configure(text="Export items listing linked to a release " + self.release + " (directories and executable objects are discarded)")        self.list_tasks_explain.configure(text="Export tasks listing linked to a release " + self.release + " (automatic tasks and components tasks are discarded)")        self.list_history_explain.configure(text="Export history listing linked to a release " + self.release)        self.log("Selected release:" + release)        self.clear_baselines()        self.clear_project()    def setBaselineSynergy(self,baseline_synergy):        '''         set CM Synergy baseline        '''        self.baseline = baseline_synergy        # in build_checklist folder        self.baseline_entry.delete(0, END)        self.baseline_entry.insert(END,baseline_synergy)        self.baseline_synergy_txt.configure(text=baseline_synergy)        self.list_items_explain.configure(text="Export items listing linked to a baseline " + baseline_synergy +" (directories and executable objects are discarded)")        self.list_tasks_explain.configure(text="Export tasks listing linked to a baseline " + baseline_synergy + " (automatic tasks and components tasks are discarded)")        self.list_history_explain.configure(text="Export history listing linked to a baseline " + baseline_synergy)    def setProject(self,project):        self.project = project        self.project_txt.configure(text=project)        # in build_checklist folder        self.project_entry.delete(0, END)        self.project_entry.insert(END,project)    def unsetRelease(self):        self.baseline_change = ""        self.baseline_txt.configure(text="None")        self.impl_cr.configure(text="CR implemented for all releases ")    def unsetBaselineSynergy(self):        self.baseline_synergy_txt.configure(text="None")    def unsetProject(self):        self.project_txt.configure(text="None")    def clear_releases(self):        self.release = "All"        self.unsetRelease()        self.releaselistbox.selection_clear(first=0,last=END)##        self.clear_baselines()    def clear_baselines(self):        self.baseline = "All"        self.unsetBaselineSynergy()        self.baselinelistbox.selection_clear(first=0,last=END)        self.list_items_explain.configure(text="Export items listing (directories and executable objects are discarded)")        self.list_tasks_explain.configure(text="Export tasks listing (automatic tasks and components tasks are discarded)")        self.list_history_explain.configure(text="Export history listing")    def clear_project(self):        '''        Clear project listbox        '''        self.project = "All"        self.unsetProject()        self.projectlistbox.selection_clear(first=0,last=END)    def clear_project_set(self):        '''        Clear Projects set        '''        self.baseline_set_box.delete(0, END)        del self.project_list[0:]        self.project_entry.delete(0, END)        self.project_entry.insert(END, self.project)        self.baseline_entry.delete(0, END)        self.baseline_entry.insert(END, self.baseline)        self.release_entry.delete(0, END)        self.release_entry.insert(END, self.release)##        del self.release_list[0:]##        del self.baseline_list[0:]    def select_project_to_delete(self,event):        index = self.baseline_set_box.curselection()        print "INDEX",index        if index in (0,()):            self.project_to_delete = ""        else:            self.project_to_delete = self.baseline_set_box.get(index[0])    def del_project(self):        index = self.baseline_set_box.curselection()        if self.project_to_delete != "":            print "Project to delete",self.project_to_delete            print "Project list",self.project_list            self.baseline_set_box.delete(0, END)            new_project_list = []            for release, baseline,project in self.project_list:                if project == self.project_to_delete:##                    self.project_list.remove(release,sbaseline,elf.project_to_delete)##                    for release, baseline,project in self.project_list:                    pass                else:                    self.baseline_set_box.insert(END, project)                    new_project_list.append([release,baseline,project])            self.project_list = new_project_list    def save_projects(self):        self.sqlite_save_projects(self.project_list)        self.log("Set of project saved in SQLite databsae ")    def restore_projects(self):        del self.project_list[0:]        # Clear box        self.clear_project_set()        self.project_list = self.sqlite_restore_projects()        # Display projects        # Extract list of baselines        # Extract list of releases        baselines_tbl = []        releases_tbl = []        for release, baseline,project in self.project_list:            self.baseline_set_box.insert(END, project)            baselines_tbl.append(baseline)            releases_tbl.append(release)        baselines_list_str = ", ".join(map(str, baselines_tbl))        # Update GUI in notebook QA report        self.baseline_entry.delete(0, END)        self.baseline_entry.insert(END,baselines_list_str)        releases_list_str = ", ".join(map(str, releases_tbl))        # Update GUI in notebook QA report        self.release_entry.delete(0,END)        self.release_entry.insert(END, releases_list_str)        if self.project_list != None:            self.button_select.configure(state=NORMAL)        self.log("Set of project restored from SQLite databsae ")    def getTypeWorkflow(self):        if self.type_cr_workflow in ("Old","New"):            if self.type_cr_workflow == "Old":                old_cr_workflow = True            else:                old_cr_workflow = False        else:            old_cr_workflow = self.status_old_workflow.get()        self.old_cr_workflow = old_cr_workflow        return(old_cr_workflow)    def display_standard(self):        # Insert standards if exist        if self.dico_list_std != {}:            self.stdlistbox.insert(END, "All")            list_stds = self.dico_list_std.keys()            list_stds.sort()##            std_index = 0            for key in list_stds:                self.stdlistbox.insert(END, key)##                std_index += 1                self.stdlistbox.itemconfig(END, bg='white', fg='black')##                num = 0                for value in self.dico_list_std[key]:##                    if num > 0:                        self.stdlistbox.insert(END, value)                        self.stdlistbox.itemconfig(END, bg='grey', fg='white')##                    num += 1            self.stdlistbox.configure(bg="white")            self.stdlistbox.selection_set(first=0)    def display_partnumber(self):        # Insert part number if exist        if self.dico_list_pn != {}:            self.pnlistbox.insert(END, "All")            list_pns = self.dico_list_pn.keys()            list_pns.sort()            for key in list_pns:                self.pnlistbox.insert(END, key)            self.pnlistbox.configure(bg="white")            self.pnlistbox.selection_set(first=0)    def display_release(self):        # Insert releases if exist        if self.dico_rl_vs_pn != {}:            self.releaselistbox.insert(END, "All")            list_rls = self.dico_rl_vs_pn.keys()            list_rls.sort()            # besoin de comparer ici la liste self.current_list_partnumber avec la liste self.dico_rl_vs_pn            for key in list_rls:                if list(set(self.current_list_partnumber).intersection(self.dico_rl_vs_pn[key])) != []:                    self.releaselistbox.insert(END, key)            self.releaselistbox.configure(bg="white")            self.releaselistbox.selection_set(first=0)    def __invert_dol_nonunique(self,d):        '''         To reverse dictionnary        '''        newdict = {}        for k in d:            for v in d[k]:                newdict.setdefault(v, []).append(k)        return newdict    def _readConfig(self):        '''         Read csv config file        '''        # read config file##        self.log("Read docid.ini config file.",False)        self.config_parser = ConfigParser()        try:            self.config_parser.read('docid.ini')            self.login = self.getOptions("User","login")            self.password = self.getOptions("User","password")            self.author = self.getOptions("User","author")            if self.config_parser.has_section("Default"):                self.default_template_type = self.getOptions("Default","template")                self.reference = self.getOptions("Default","reference")                self.revision = self.getOptions("Default","issue")                self.part_number = self.getOptions("Default","part_number")                self.board_part_number = self.getOptions("Default","board_part_number")                self.checksum = self.getOptions("Default","checksum")                self.dal = self.getOptions("Default","dal")                self.previous_baseline = self.getOptions("Default","previous_baseline")                self.verbose = self.getOptions("Default","verbose")                self.release_regexp = self.getOptions("Default","release_regexp")                # Release                self.release = self.getOptions("Default","release")                # Detect on                self.previous_release = self.getOptions("Default","detect_release")                # Implemented on                self.impl_release = self.getOptions("Default","impl_release")                self.baseline_change = self.release                # Baseline                self.baseline = self.getOptions("Default","baseline")                self.baseline_delivery = self.getOptions("Default","baseline_delivery")                # Project                self.project = self.getOptions("Default","project")            else:                self.default_template_type = ""                self.reference = ""                self.revision = ""                self.part_number = ""                self.board_part_number = ""                self.checksum = ""                self.dal = ""                self.previous_release = ""                self.verbose = "no"                self.release_regexp = ""                # Release                self.release = ""                self.impl_release = ""                self.baseline_change = ""                # Baseline                self.baseline = ""                self.baseline_delivery = ""                # Project                self.project = ""            # get A/C standards            self.dico_rl_vs_pn = {}            if self.config_parser.has_section("Standards"):                if self.config_parser.has_option("Standards","file"):                    file_csv_name = self.config_parser.get("Standards","file")                    self.dico_std = {}                    self.dico_list_std_vs_stdac = {}                    self.dico_list_std = {}                    self.dico_list_pn = {}                    self.dico_list_pn_modified = {}                    self.dico_list_pn_vs_stdac = {}                    self.dico_list_pn_reverted = {}                    self.dico_list_pn_modified_reverted = {}                    self.dico_std_vs_pn = {}                    # Standards avion versus PN                    self.dico_std_ac_vs_pn = {}                    self.dico_pn_vs_rl = {}                    with open(file_csv_name, 'rb') as file_csv_handler:                        reader = csv.reader (self.CommentStripper (file_csv_handler))                        for row in reader:                            num=0                            list_all = []                            # List of standards                            list_std = []                            # list of part numbers                            list_pn = []                            # List of release                            list_rl = []                            attr = []                            ci_name = ""                            type_id = ""                            for col in row:                                if num == 0:                                    # Tag appearing in release box                                    tag = col                                elif num == 1:                                    # Type of identification: Standard, Part Nunmber                                    type_id = col                                    attr.append(type_id)                                elif num == 2:                                    # Name of Configuration Item: ATUPU,ENMU etc ...                                    ci_name = col                                    attr.append(ci_name)    ##                                list_all.append(attr)                                else:                                    list_all.append(col)                                    if type_id in ("PN","SW"):                                        list_pn.append(col)                                    elif type_id == "STD":                                        list_std.append(col)                                    elif type_id == "RL":                                        list_rl.append(col)                                    else:                                        pass                                num += 1                            if type_id in ("PN","SW"):                                self.dico_list_pn[tag] = list_pn                            elif type_id == "STD":                                # STD                                self.dico_list_std[tag] = list_std##                                self.dico_std_ac_vs_pn[tag] = list_std                            elif type_id == "RL":                                self.dico_rl_vs_pn[tag] = list_rl                            else:                                pass                            self.dico_std[tag] = list_all                    self.dico_pn_vs_rl = self.__invert_dol_nonunique(self.dico_rl_vs_pn)                    self.dico_list_std_vs_stdac = self.__invert_dol_nonunique(self.dico_list_std)                    #                    # Dans la liste des part numbers remplacer les standards avions par les sous-standards projets                    #                    for key_pn, values_std in self.dico_list_pn.iteritems() :    ##                    print values_std                        list_pn_vs_std = []                        list_pn_vs_stdac = []                        for value_std in values_std:    ##                        print value_std                            if self.dico_list_std.has_key(value_std):                                # value_std est un standard avion                                # on remplace le standard avion par les sous-standards projet                                list_pn_vs_std.extend(self.dico_list_std[value_std])                                list_pn_vs_stdac.append(value_std)                            else:                                list_pn_vs_stdac.extend(self.dico_list_std_vs_stdac[value_std])                                list_pn_vs_std.append(value_std)                        self.dico_list_pn_vs_stdac[key_pn] = list_pn_vs_stdac                        self.dico_list_pn_modified[key_pn] = list_pn_vs_std                    self.dico_list_stdac_vs_pn = self.__invert_dol_nonunique(self.dico_list_pn_vs_stdac)##                    print self.dico_list_stdac_vs_pn                    # Inverse le dictionnaire des part_numbers                    self.dico_list_pn_modified_reverted = self.__invert_dol_nonunique(self.dico_list_pn_modified)                    # Met � jour la liste des standards aves les sous-standards                    self.dico_std.update(self.dico_list_pn_modified_reverted)##                    print self.dico_std                    # revert dico to update dictionary with part numbers                    self.dico_list_pn_reverted = self.__invert_dol_nonunique(self.dico_list_pn)                    for key_std, value_pn in self.dico_list_pn_reverted.iteritems() :                        for key_std_aircraft, value_std in self.dico_list_std.iteritems() :                            if key_std in self.dico_list_std[key_std_aircraft]:                                # le sous-standard key_std est-il associ� � un standard key_std_aircraft ?                                # Example:                                #   dico_list_std => Standard 1,STD,EPDS,S1,S1.1                                #   dico_list_pn => 955CE05Y03:S1                                #                   335CE06YXX:S1                                #   dico_list_pn_reverted => S1:955CE05Y03,335CE06YXX                                #   Ici S1 fait partie du Standard 1 donc on ajoute la liste des part number � dico_std_vs_pn                                #   dico_std_vs_pn => Standard 1,955CE05Y03,335CE06YXX                                #                                self.dico_std[key_std_aircraft].extend(self.dico_list_pn_reverted[key_std])                                self.dico_std_vs_pn[key_std_aircraft] = self.dico_list_pn_reverted[key_std]                            elif key_std == key_std_aircraft:                                self.dico_std[key_std_aircraft].extend(self.dico_list_pn_reverted[key_std])                                self.dico_std_vs_pn[key_std_aircraft] = self.dico_list_pn_reverted[key_std]                    # Create table Standard, sub-standard versus part number                    self.dico_std_vs_pn.update(self.dico_list_pn_modified_reverted)                    self.current_list_partnumber = self.dico_list_pn.keys()                    self.std_exists = True                else:                    self.std_exists = False        except KeyError as exception:            print "A/C standards determination failed:", exception        except IOError as exception:            print "A/C standards determination failed:", exception    def getStandard(self):        return self.std_exists    def click_update_pn_csv(self):        self._readConfig()        self.releaselistbox.delete(0, END)        self.queue.put("GET_RELEASES") # action to get releases    def click_update_config(self):        # read config file        self._readConfig()        self.queue.put("RELOAD_CONFIG")    def __init__(self, notebook,queue,system,item, **kwargs):        global background        global foreground        global entry_size        global item_id        ActionGui.__init__(self)##        Action.__init__(self)        self.std_exists = False        self.current_list_partnumber = []        self.dico_std = {}        self.checkbutton_all = False        # read config file        self.default_template_type = "SCI"        self.reference = "" #"ET1234-V"        self.revision = "" #"1D1"        self.release = ""        self.baseline_change = ""        self.baseline = ""        self.previous_baseline = ""        self.detect_release = ""        self.project = ""        self.verbose = "no"        # Read config        self._readConfig()        # Set logging        self.loginfo = logging.getLogger(__name__)        if self.verbose == "yes":            out_hdlr = logging.FileHandler(filename='docid.log')        else:            out_hdlr = logging.StreamHandler(sys.stdout)        out_hdlr.setFormatter(logging.Formatter('%(asctime)s %(message)s'))        out_hdlr.setLevel(logging.INFO)        self.loginfo.addHandler(out_hdlr)        self.loginfo.setLevel(logging.INFO)        self.loginfo.debug("NO")        self.system = system        self.item = item        self.component = ""        self.cr_type = ""        self.review_qams_id = ""        self.project_to_delete = ""        # Get        #       - Database        #       - Aircraft        #        if self.item != "":            self.database,self.aircraft = self.get_sys_item_database(self.system,self.item)            if self.database == None:                self.database,self.aircraft = self.get_sys_database()        else:            self.database,self.aircraft = self.get_sys_database()        self.standard = ""        self.partnumber = "" # Warning, P/N managed by the listbox pnlistbox in the GUI class##        self.board_part_number = ""        self.item_id = item_id        self.session_started = False        self.queue = queue        self.project_list = []        self.attribute = "CR_implemented_for"##        self.release_list = []##        self.baseline_list = []        self.type_cr_workflow = "None"        # Create widgets        entry_size = 40        # Add pages to the notebook.        page_create_cid = notebook.add('Create configuration index document')        page_create_ccb = notebook.add('Change Requests query')        page_check_baseline = notebook.add('Synergy specific commands')        page_synergy_cli = notebook.add('Synergy easy Command Line Interface')##        page_create_sqap = notebook.add('Create SQAP')##        self.hidepage(page_create_sqap)        page_create_checklist = notebook.add('Create AQ report')        # Create top frame, with scrollbar and listbox        Frame.__init__(self, page_create_cid, width=700, height=576,relief =GROOVE,**kwargs)        self.pack(fill=BOTH)        self.cid_config = Frame(self)        row_index = 1        self.cid_config.pack(side=LEFT)        # Type of CID        row_index = 1        self.cid_type_txt = Label(self.cid_config, text='CID type:', fg=foreground)        self.cid_var_type = StringVar()        self.hcmr_var_type = StringVar()        self.radiobutton_sci = Radiobutton(self.cid_config, indicatoron=0,width = 12,text="SCI", variable=self.cid_var_type,value="SCI",fg=foreground,command=self.cid_type)        self.radiobutton_hci = Radiobutton(self.cid_config, indicatoron=0,width = 12,text="HCMR", variable=self.cid_var_type,value="HCMR",fg=foreground,command=self.cid_type)        self.radiobutton_cid = Radiobutton(self.cid_config, indicatoron=0,width = 12,text="CID", variable=self.cid_var_type,value="CID",fg=foreground,command=self.cid_type)        self.radiobutton_hci_pld =Radiobutton(self.cid_config, text="HCMR PLD", variable=self.hcmr_var_type,value="HCMR_PLD",fg=foreground,command=self.cid_type)        self.radiobutton_hci_board =Radiobutton(self.cid_config, text="HCMR BOARD", variable=self.hcmr_var_type,value="HCMR_BOARD",fg=foreground,command=self.cid_type)        self.cid_var_type.set(self.default_template_type) # initialize        self.hcmr_var_type.set("HCMR_PLD") # initialize        self.cid_type_txt.grid(row =row_index,sticky='E')        self.radiobutton_sci.grid(row =row_index, column =1, padx=10,sticky='W')        self.radiobutton_hci.grid(row =row_index, column =1, padx=88,sticky='W')        self.radiobutton_cid.grid(row =row_index, column =1, padx=10,sticky='E')        row_index += 1        self.radiobutton_hci_pld.grid(row =row_index, column =1, padx=10,sticky='W')        self.radiobutton_hci_board.grid(row =row_index, column =1, padx=10,sticky='E')        # Author        row_index += 1        author_txt = Label(self.cid_config, text='Author:', fg=foreground)        author_txt.grid(row =row_index,sticky='E')        self.author_entry = Entry(self.cid_config, state=NORMAL,width=entry_size)        self.author_entry.insert(END, self.author)        self.author_entry.grid(row = row_index, column =1,sticky='E')        # Reference        row_index += 1        reference_txt = Label(self.cid_config, text='Reference:', fg=foreground)        self.reference_entry = Entry(self.cid_config, state=NORMAL,width=entry_size)        self.reference_entry.insert(END, self.reference)        reference_txt.grid(row =row_index,sticky='E')        self.reference_entry.grid(row = row_index, column =1,sticky='E')        # Issue        row_index += 1        revision_txt = Label(self.cid_config, text='Issue:', fg=foreground)        self.revision_entry = Entry(self.cid_config, state=NORMAL,width=entry_size)        self.revision_entry.insert(END, self.revision)        revision_txt.grid(row =row_index,sticky='E')        self.revision_entry.grid(row =row_index, column =1,sticky='E')        # Part number        row_index += 1        part_number_txt = Label(self.cid_config, text='Part Number:', fg=foreground)        self.part_number_entry = Entry(self.cid_config, state=NORMAL,width=entry_size)        self.part_number_entry.insert(END, self.part_number)        part_number_txt.grid(row =row_index,sticky='E')        self.part_number_entry.grid(row =row_index, column =1,sticky='E')        # Board Part number        row_index += 1        board_part_number_txt = Label(self.cid_config, text='Board P/N:', fg=foreground)        self.board_part_number_entry = Entry(self.cid_config, state=NORMAL,width=entry_size)        self.board_part_number_entry.insert(END, self.board_part_number)        board_part_number_txt.grid(row =row_index,sticky='E')        self.board_part_number_entry.grid(row =row_index, column =1,sticky='E')        # Checksum        row_index += 1        checksum_txt = Label(self.cid_config, text='Checksum:', fg=foreground)        self.checksum_entry = Entry(self.cid_config, state=NORMAL,width=entry_size)        self.checksum_entry.insert(END, self.checksum)        checksum_txt.grid(row =row_index,sticky='E')        self.checksum_entry.grid(row =row_index, column =1,sticky='E')        # DAL        row_index += 1        dal_txt = Label(self.cid_config, text='DAL:', fg=foreground)        self.dal_entry = Entry(self.cid_config, state=NORMAL,width=entry_size)        self.dal_entry.insert(END, self.dal)        dal_txt.grid(row =row_index,sticky='E')        self.dal_entry.grid(row =row_index, column =1,sticky='E')        # Previous baseine        row_index += 1        previous_baseline_txt = Label(self.cid_config, text='Previsou Baseline:', fg=foreground)        self.previous_baseline_entry = Entry(self.cid_config, state=NORMAL,width=entry_size)        self.previous_baseline_entry.insert(END, self.previous_baseline)        previous_baseline_txt.grid(row =row_index,sticky='E')        self.previous_baseline_entry.grid(row =row_index, column =1,sticky='E')        # Build        row_index += 1        self.button_select = Button(self.cid_config, text='Generate', state=DISABLED, command = self.click_build_cid)        self.button_select.grid(row =row_index, column =1,pady=5,sticky='E')        self.button_cancel = Button(self.cid_config, text='Cancel', command = self.click_cancel_build_cid)        self.button_cancel.grid(row =row_index, column =1,pady=5,sticky='W')        # Check buttons        row_index += 1        self.objects_txt = Label(self.cid_config, text='Objects:', fg=foreground)        self.status_released = IntVar()        self.check_button_status_released = Checkbutton(self.cid_config, text="Only in state 'Released'", variable=self.status_released,fg=foreground,command=self.cb_released)        self.status_integrate = IntVar()        self.check_button_status_integrate = Checkbutton(self.cid_config, text="Only in state 'Integrate'", variable=self.status_integrate,fg=foreground,command=self.cb_integrate)        self.objects_txt.grid(row =row_index,sticky='E')        self.check_button_status_released.grid(row =row_index, column =1, padx=10,sticky='W')        row_index += 1        self.check_button_status_integrate.grid(row =row_index, column =1,padx=10,sticky='W')        #        # Projects set        #        self.cid_config_middle = Frame(self)        row_index = 1        self.cid_config_middle.pack(side=LEFT)        row_index += 1        items_txt = Label(self.cid_config_middle, text='Projects set:', fg=foreground,width=40,anchor=W,padx=20)        items_txt.grid(row = row_index, sticky='E')        row_index += 1        self.baseline_set_frame = Frame(self.cid_config_middle)        self.baseline_set_frame.grid(row = row_index, padx=30,sticky='W')        self.vbar_baseline_set = vbar_baseline_set = Scrollbar(self.baseline_set_frame , name="vbar_baseline_set")        self.vbar_baseline_set.pack(side=RIGHT, fill=Y)        self.baseline_set_box = Listbox(self.baseline_set_frame ,height=8,width=30,exportselection=0,yscrollcommand=vbar_baseline_set.set)        self.baseline_set_box.pack()        vbar_baseline_set["command"] = self.baseline_set_box.yview        self.baseline_set_box.bind("<ButtonRelease-1>", self.select_project_to_delete)        row_index += 1        self.button_clear_projects = Button(self.cid_config_middle, text='Clear', state=NORMAL, command = self.clear_project_set)        self.button_clear_projects.grid(row = row_index, padx=50, sticky='E')        self.button_del_project = Button(self.cid_config_middle, text='Del', state=NORMAL, command = self.del_project)        self.button_del_project.grid(row = row_index, padx=20, sticky='E')        self.button_save_projects = Button(self.cid_config_middle, text='Save', state=NORMAL, command = self.save_projects)        self.button_save_projects.grid(row = row_index, padx=20, sticky='W')        self.button_restore_projects = Button(self.cid_config_middle, text='Restore', state=NORMAL, command = self.restore_projects)        self.button_restore_projects.grid(row = row_index, padx=60, sticky='W')        row_index += 1        self.items_explain_txt = Label(self.cid_config_middle, text='This listbox displays projects selected for CID\n generation by the "Set" button below.', fg=foreground,width=40,anchor=W,padx=20)        self.items_explain_txt.grid(row = row_index, sticky='E')        #        # Right        #        self.cid_config_right = Frame(self)        row_index = 1        self.cid_config_right.pack(side=LEFT)        # Description of the selected project        self.project_description = Label(self.cid_config_right,text='System:' + self.system, fg=foreground)        self.project_description.grid(row =row_index,padx =0,sticky='W')        # Items        row_index += 1        items_txt = Label(self.cid_config_right, text='Board items:', fg=foreground,width=40,anchor=W,padx=0)        items_txt.grid(row = row_index, sticky='W')        row_index += 1        self.itemslistbox_frame = Frame(self.cid_config_right)        self.itemslistbox_frame.grid(row = row_index, padx=0,sticky='W')        self.vbar_2 = vbar_2 = Scrollbar(self.itemslistbox_frame , name="vbar_2")        self.vbar_2.pack(side=RIGHT, fill=Y)        self.itemslistbox = Listbox(self.itemslistbox_frame ,height=3,width=30,exportselection=0,yscrollcommand=vbar_2.set)        self.itemslistbox.pack()        self.itemslistbox.insert(END, "All")        vbar_2["command"] = self.itemslistbox.yview        self.itemslistbox.bind("<ButtonRelease-1>", self.select_item)        self.itemslistbox.bind("<Key-Up>", lambda event, arg=self.itemslistbox: self.up_event(event, arg))        self.itemslistbox.bind("<Key-Down>", lambda event, arg=self.itemslistbox: self.down_event(event, arg))        # Components        row_index += 1        components_txt = Label(self.cid_config_right, text='Software or PLD components:', fg=foreground,width=40,anchor=W,padx=0)        components_txt.grid(row = row_index, sticky='W')        row_index += 1        componentslistbox_frame = Frame(self.cid_config_right)        componentslistbox_frame.grid(row = row_index, padx=0,sticky='W')        self.vbar_components = vbar_components = Scrollbar(componentslistbox_frame , name="vbar_components")        self.vbar_components.pack(side=RIGHT, fill=Y)        self.componentslistbox = Listbox(componentslistbox_frame ,height=3,width=30,exportselection=0,yscrollcommand=vbar_components.set)        self.componentslistbox.pack()        self.componentslistbox.insert(END, "All")        vbar_components["command"] = self.componentslistbox.yview        self.componentslistbox.bind("<ButtonRelease-1>", self.select_component)        self.componentslistbox.bind("<Key-Up>", lambda event, arg=self.componentslistbox: self.up_event(event, arg))        self.componentslistbox.bind("<Key-Down>", lambda event, arg=self.componentslistbox: self.down_event(event, arg))##        row_index += 1##        detect_cr_txt = "CR detected in release " + self.previous_release##        self.detect_cr = Label(self.cid_config_right, text=detect_cr_txt, fg=foreground,width=40,anchor=W,padx=0)##        self.detect_cr.grid(row = row_index, sticky='W')##        row_index += 1##        impl_cr_txt = "CR implemented for release " + self.release##        self.impl_cr = Label(self.cid_config_right, text=impl_cr_txt, fg=foreground,width=40,anchor=W,padx=0)##        self.impl_cr.grid(row = row_index, sticky='W')        # Check new/old CR workflow        row_index += 1        self.workflow_txt = Label(self.cid_config_right, text='CR workflow:', fg=foreground)        self.status_old_workflow = IntVar()        self.check_cr_workflow_status = Checkbutton(self.cid_config_right, text="Old", variable=self.status_old_workflow,fg=foreground,command=self.cb_old_workflow)##        print "TEST",self.system,self.item        old_workflow = self.get_sys_item_old_workflow(self.system,self.item)        if old_workflow:            self.check_cr_workflow_status.select()        self.workflow_txt.grid(row =row_index,sticky='W')        self.check_cr_workflow_status.grid(row =row_index, padx=70,sticky='W')        self.workflow_txt.grid_forget()        self.check_cr_workflow_status.grid_forget()        self.cid_config_right_spare = Frame(self,width=120)        # Image        self.can = Canvas(self.cid_config_right_spare, width =240, height =116,highlightthickness=0)##        bitmap = PhotoImage(file="img/earhart12_240x116.gif")##        self.can.create_image(120,58,image =bitmap)##        self.can.bitmap = bitmap        # Display aircraft image        if self.aircraft not in ("",None,"None"):            aircraft_img = self.get_image(self.aircraft)            try:                bitmap = PhotoImage(file="img/"+ aircraft_img)            except TclError as exception:                print "TCL error:", exception                bitmap = PhotoImage(file="img/earhart12_240x116.gif")        else:            bitmap = PhotoImage(file="img/earhart12_240x116.gif")        row_index += 1        try:            self.can.create_image(120,58,image =bitmap)            self.can.bitmap = bitmap            self.can.grid(row =row_index, rowspan =5, padx =20, pady =30,sticky='W')        except TclError as exception:                print "TCL error:", exception        self.cid_config_right_spare.pack()        # Build SQAP folder in the notebook##        self._build_sqap_folder(page_create_sqap,**kwargs)        # Build checklist folder in the notebook        self._build_checklist_folder(page_create_checklist,**kwargs)        # Build CCB folder in the notebook        self._build_ccb_folder(page_create_ccb,**kwargs)        self.cid_type()        # Build checklist folder in the notebook        self._check_baseline_folder(page_check_baseline,**kwargs)        # Build Synergy CLI folder in the notebook        self._synergy_cli(page_synergy_cli,**kwargs)        # Populate items list box        self.item = self.populate_specific_listbox(self.itemslistbox,self.item_id,self.system)        # Populate components list box        self.populate_components_listbox(self.componentslistbox,(),self.item,self.system)##        page_create_checklist = notebook.delete('Create checklist')        # OAP_review  self.hidepage(notebook,'Create checklist')    def _setPreviousRelease(self,event=""):        '''        Set detected on parameter for change request query        '''        self.previous_release = self.previous_release_entry.get()        self.detect_release = self.previous_release        if self.previous_release == "":            text = "CR detected in all releases "        else:            text = "CR detected in release " + self._splitComma(self.previous_release)        self.detect_cr.configure(text=text)        self.log(text,False)        self.defill()    def _setImplRelease(self,event=""):        '''        Set implemented for parameter for change request query        '''        self.impl_release = self.impl_release_entry.get()        self.target_release_entry.delete(END)        self.target_release_entry.insert(END,self.impl_release)        if self.impl_release == "":            text = "CR implemented in all releases "        else:            text = "CR implemented in release " + self._splitComma(self.impl_release)        self.impl_cr.configure(text=text)        self.log(text,False)        self.defill()    def _setCRType(self,event=""):        '''        Set implemented for parameter for change request query        '''        self.cr_type = self.cr_type_entry.get()        if self.cr_type == "":            text = "All CR types "        else:            text = "CR type selected: " + self.cr_type        self.log(text,False)        self.defill()    def hidepage(self, notebook,pageName):##        pass        """New method hidepage"""        # hide is not possible if only one page present        if len(notebook._pageNames) == 1:            return        pageInfo = notebook._pageAttrs[pageName]##        print "pageInfo",pageInfo        # attribute visible does not exist in PMW v1.3.0##        # return, if already hidden##        if pageInfo['visible'] == 0:##            return####        pageInfo['visible'] = 0        pageIndex = notebook.index(pageName)        if pageIndex == 0:            newTopIndex = 1        else:            newTopIndex = 1#pageIndex - 1        if newTopIndex >=  0:            newTopPage = notebook._pageNames[newTopIndex]            notebook.selectpage(newTopPage)        if notebook._withTabs:            notebook._pending['tabs'] = 1            notebook._layout()##    def select_item(self, event):##        ''' select item and enable OK button to goto the next popup window'''##        item_id = self.itemslistbox.curselection()##        self.item_id = item_id    def changeColour(self, colour):        print colour##        self.listbox_txt.configure(background = colour)    def _synergy_cli(self,page,**kwargs):        Frame.__init__(self, page, width=768, height=576,relief =GROOVE, **kwargs)        self.pack(fill=BOTH,expand=1)        # command        row_index = 1        command_frame = LabelFrame(self, text='Synergy command:',bd=0)        command_frame.pack(fill=BOTH,expand=1,ipadx=5,ipady=5)##        self.command_label = Label(command_frame, text='Synergy command:',fg=foreground)##        self.command_label.pack(fill=X);        self.command_txt = Text(command_frame,wrap=WORD, height = 6)        self.command_txt.pack(fill=X,expand=1)        self.command_ex = Text(command_frame, fg=foreground,bg="grey", height = 6)        self.command_ex.insert(END,'Examples:\n=========\n')##        if self.release != "":        self.command_ex.insert(END,'task -u -qu -rel SW_PLAN/01 -f "%displayname %status %task_synopsis"\n')        self.command_ex.insert(END,'task -show objects 602\n')        self.command_ex.insert(END,'task -show info 21\n')        self.command_ex.insert(END,'task -show change_request 68\n')        self.command_ex.insert(END,'query -sby name -ch -n "SQAP_SW_PLAN_PQ 0.1.0.155.docx" -release SW_PLAN/01 -f "%name %version %task %task_synopsis %change_request %change_request_synopsis"\n')        self.command_ex.insert(END,'query -sby name -ch -n *.* -release A267/11  -f "%name %version %modify_time %status %task %change_request"\n')        self.command_ex.insert(END,'dir SW_PLAN_WDS\PSAC@SW_PLAN_WDS:doc\n')        self.command_ex.insert(END,'baseline -c SW_PLAN_SQA_01_01 -d "Create planning review baseline" -r SW_PLAN/01 -purpose "For planning review actions tracking" -p SW_PLAN_SQA-1.0')        self.command_ex.pack(fill=X,expand=1);        # send command        self.button_send_cmd = Button(command_frame, text='Exec', command = self.click_send_cmd)        self.button_send_cmd.pack(side=RIGHT,fill=X,padx=5)    def _check_baseline_folder(self,page,**kwargs):        Frame.__init__(self, page, width=768, height=576,relief =GROOVE,**kwargs)        self.pack(fill=BOTH)        baseline_frame = LabelFrame(self, text='Baseline',bd=1,padx=10,pady=10)        baseline_frame.pack(fill=BOTH,expand=1,ipadx=5,ipady=5)        # Previous baseline        self.baseline_txt_1 = LabelFrame(baseline_frame, text='Previous baseline:', fg=foreground,bd=0)        self.baseline_txt_1.pack(side=LEFT);        self.baselinelistbox_1 = Listbox(self.baseline_txt_1,height=6,width=entry_size,exportselection=0)        self.vbar_5_1 = vbar_5_1 = Scrollbar(self.baseline_txt_1, width=16,name="vbar_5_1")        vbar_5_1["command"] = self.baselinelistbox_1.yview        self.baselinelistbox_1["yscrollcommand"] = vbar_5_1.set        self.vbar_5_1.pack(side=RIGHT, fill=Y)        self.baselinelistbox_1.bind("<ButtonRelease-1>", self.select_baseline_prev)        self.baselinelistbox_1.bind("<Key-Up>", lambda event, arg=self.baselinelistbox_1: self.up_event(event, arg))        self.baselinelistbox_1.bind("<Key-Down>", lambda event, arg=self.baselinelistbox_1: self.down_event(event, arg))        self.baselinelistbox_1.pack();        # Current baseline        self.baseline_txt_2 = LabelFrame(baseline_frame, text='Current baseline:', fg=foreground,bd=0)        self.baseline_txt_2.pack(side=LEFT);        self.baselinelistbox_2 = Listbox(self.baseline_txt_2,height=6,width=entry_size,exportselection=0)        self.vbar_5_2 = vbar_5_2 = Scrollbar(self.baseline_txt_2,width=16, name="vbar_5_2")        vbar_5_2["command"] = self.baselinelistbox_2.yview        self.baselinelistbox_2["yscrollcommand"] = vbar_5_2.set        self.vbar_5_2.pack(side=RIGHT, fill=Y)        self.baselinelistbox_2.bind("<ButtonRelease-1>", self.select_baseline_cur)        self.baselinelistbox_2.bind("<Key-Up>", lambda event, arg=self.baselinelistbox_2: self.up_event(event, arg))        self.baselinelistbox_2.bind("<Key-Down>", lambda event, arg=self.baselinelistbox_2: self.down_event(event, arg))        self.baselinelistbox_2.pack();        # Diff        self.button_make_diff = Button(baseline_frame, text='Diff baselines', state=DISABLED, command = self.click_make_baseline_diff)        self.button_make_diff.pack(side=LEFT,fill=Y,padx=5,pady=20);        self.button_show_baseline = Button(baseline_frame, text='Show baseline', state=DISABLED, command = self.click_show_baseline)        self.button_show_baseline.pack(side=LEFT,fill=Y,padx=5,pady=20);        # List items and tasks        commands_txt = LabelFrame(self, text='Miscelleanous commands:', fg=foreground,bd=0)        commands_txt.pack(side=LEFT);        button_frame = LabelFrame(commands_txt, fg=foreground,bd=0)        button_frame.pack(side=LEFT);        self.button_list_items = Button(button_frame, text='List items', state=NORMAL,width=18, command = self.list_items)        self.button_list_items.pack()        self.button_list_tasks = Button(button_frame, text='List tasks', state=NORMAL,width=18, command = self.click_list_tasks)        self.button_list_tasks.pack();        self.button_list_history = Button(button_frame, text='List history', state=NORMAL,width=18, command = self.click_list_history)        self.button_list_history.pack(fill=X);        self.history_scope = IntVar()        self.with_cr = IntVar()        checkbox_frame = LabelFrame(commands_txt, fg=foreground,bd=0)        checkbox_frame.pack(side=LEFT);        self.radio_scope_list_tasks = Checkbutton(checkbox_frame, text="With CR", variable=self.with_cr,fg=foreground)        self.radio_scope_list_tasks.pack(fill=X,pady=10,anchor=W);        self.radio_scope_list_tasks.config(state=NORMAL)##        self.radio_scope_list_tasks.select()        self.radio_scope_list_history = Checkbutton(checkbox_frame, text="Only source files",variable=self.history_scope,fg=foreground)        self.radio_scope_list_history.pack(fill=X,anchor=W);        self.radio_scope_list_history.config(state=NORMAL)        self.radio_scope_list_history.select()        explain_frame = LabelFrame(commands_txt, fg=foreground,bd=0)        explain_frame.pack(fill=X);        self.list_items_explain = Label(explain_frame, text="Export items listing linked to a release or a baseline (directories and executable objects are discarded)", fg=foreground,width=80,anchor=W,padx=50,pady=4)        self.list_items_explain.pack(fill=X)        self.list_tasks_explain = Label(explain_frame, text="Export tasks listing linked to a release or a baseline (automatic tasks and components tasks are discarded)", fg=foreground,width=80,anchor=W,padx=50,pady=4)        self.list_tasks_explain.pack(fill=X)        self.list_history_explain = Label(explain_frame, text="Export history of items linked to a release or a baseline", fg=foreground,width=80,anchor=W,padx=50,pady=4)        self.list_history_explain.pack(fill=X)    def _build_checklist_folder(self,page,**kwargs):        '''        Create page for review report generation        '''        self.var_review_type = IntVar()        # Create top frame, with scrollbar and listbox        Frame.__init__(self, page, width=256, height=576,relief =GROOVE, **kwargs)        self.pack(fill=BOTH)        review_list_frame = Frame(self,page,width=50)        # Type of review        review_type_txt = Label(review_list_frame, text='Review type:', fg=foreground)        review_type_txt.pack()        review_list = Review.getReviewList()##        print review_list        for id,text in review_list:            b = Radiobutton(review_list_frame, indicatoron=0,width = 40, text=text,variable=self.var_review_type, value=id)            if id not in (1,2,3,9):                b.config(state=DISABLED)            b.pack(anchor=W)        self.var_review_type.set(1) # initialize        spare = Label(review_list_frame)        spare.pack()        button_create_review = Button(review_list_frame, text='Create report', state=NORMAL, command = self.click_create_report,justify=LEFT)        button_create_review.pack(fill=X)        audit_list_frame = Frame(self,page,width=50)        audit_type_txt = Label(audit_list_frame, text='Evaluation type:', fg=foreground,anchor=W)        audit_type_txt.pack()        audit_list = [(20,"Specification"),                        (21,"Design"),                        (22,"Coding"),                        (23,"Tests"),                        (24,"Delivery")]##        print review_list        for id,text in audit_list:            b = Radiobutton(audit_list_frame, indicatoron=0,width = 40, text=text,variable=self.var_review_type, value=id)            if id not in (20,):                b.config(state=DISABLED)            b.pack(anchor=W)        info_frame = Frame(self,page,width=50)        # Author        author_txt = Label(info_frame, text='Author:', fg=foreground,width=40,anchor=W,padx=20)        self.author_entry = Entry(info_frame, width=entry_size,state=NORMAL,bg="gray")        self.author_entry.insert(END, self.author)        author_txt.pack()        self.author_entry.pack()        # Part number        part_number_txt = Label(info_frame, text='Part number:', fg=foreground,width=40,anchor=W,padx=20)        self.ccb_part_number_entry = Entry(info_frame, width=entry_size,state=NORMAL,bg="gray")        self.ccb_part_number_entry.insert(END, self.part_number)        part_number_txt.pack()        self.ccb_part_number_entry.pack()        # Checksum        checksum_txt = Label(info_frame, text='Checksum:', fg=foreground,width=40,anchor=W,padx=20)        self.ccb_checksum_entry = Entry(info_frame, width=entry_size,state=NORMAL,bg="gray")        self.ccb_checksum_entry.insert(END, self.checksum)        checksum_txt.pack()        self.ccb_checksum_entry.pack()        # Release        release_txt = Label(info_frame, text='Release:', fg=foreground,width=40,anchor=W,padx=20)        self.release_entry = Entry(info_frame, width=entry_size,state=NORMAL,bg="gray")        self.release_entry.insert(END, self.release)        release_txt.pack()        self.release_entry.pack()        # Target release        target_release_txt = Label(info_frame, text='Target release:', fg=foreground,width=40,anchor=W,padx=20)        self.target_release_entry = Entry(info_frame, width=entry_size,state=NORMAL,bg="gray")        self.target_release_entry.insert(END, self.previous_release)        target_release_txt.pack()        self.target_release_entry.pack()        # Baseline        baseline_txt = Label(info_frame, text='Baseline:', fg=foreground,width=40,anchor=W,padx=20)        self.baseline_entry = Entry(info_frame, width=entry_size,state=NORMAL,bg="gray")        baseline_txt.pack()        self.baseline_entry.pack()        # Project        project_txt = Label(info_frame, text='Project:', fg=foreground,width=40,anchor=W,padx=20)        self.project_entry = Entry(info_frame, width=entry_size,state=NORMAL,bg="gray")        project_txt.pack()        self.project_entry.pack()        # Review QAMS ID        review_qams_id_txt = Label(info_frame, text='Review QAMS ID:', fg=foreground,width=40,anchor=W,padx=20)        self.review_qams_id_entry = Entry(info_frame, width=entry_size,state=NORMAL,bg="gray")        review_qams_id_txt.pack()        self.review_qams_id_entry.pack()        list_review_frame = Frame(self,page,width=50)        review_qams_id_txt = Label(list_review_frame, text='Review list:', fg=foreground,width=40,anchor=W,padx=20)        review_qams_id_txt.pack()        self.reviewlistbox = Listbox(list_review_frame,height=15,width=64,exportselection=0,state=DISABLED,bg="gray")        self.reviewlistbox.insert(END, "All")        self.vbar_reviewlisbox = vbar_reviewlisbox = Scrollbar(list_review_frame, name="vbar_reviewlisbox")        self.vbar_reviewlisbox.pack(side=RIGHT, fill=Y)        vbar_reviewlisbox["command"] = self.reviewlistbox.yview        self.reviewlistbox["yscrollcommand"] = vbar_reviewlisbox.set        self.reviewlistbox.bind("<ButtonRelease-1>", self.select_review_list)        self.reviewlistbox.bind("<MouseWheel>", self.reviewlistbox_scrollEvent)##        self.reviewlistbox.bind("<<ListboxSelect>>", self.reviewlistbox_onselect)        self.reviewlistbox.bind("<Button-1>", self.reviewlistbox_onselect)        self.reviewlistbox.bind("<Key-Up>", lambda event, arg=self.reviewlistbox: self.up_event(event, arg))        self.reviewlistbox.bind("<Key-Down>", lambda event, arg=self.reviewlistbox: self.down_event(event, arg))        self.reviewlistbox.pack()        # Update list of project of GUI        self.reviewlistbox.configure(state=NORMAL)        self.reviewlistbox.delete(0, END)        inter = 0        from api_mysql import MySQL        mysql = MySQL()        list_review = mysql.exportReviewsList()        for review_description in list_review:            self.reviewlistbox.insert(END, review_description)            if inter % 2 == 0:                self.reviewlistbox.itemconfig(inter,{'bg':'darkgrey','fg':'white'})            else:                self.reviewlistbox.itemconfig(inter,{'bg':'lightgrey','fg':'black'})            inter += 1        self.reviewlistbox.configure(bg="white")        review_list_frame.pack(side=LEFT)        audit_list_frame.pack(side=LEFT)        info_frame.pack(side=LEFT)        list_review_frame.pack(side=LEFT)    def click_create_report(self):        self.queue.put("BUILD_REVIEW_REPORT") # action to get projects        self.queue.put("PR")        pass    def _build_sqap_folder(self,page,**kwargs):        global entry_size        global project_item        self.item = project_item        # Create top frame, with scrollbar and listbox        Frame.__init__(self, page, width=768, height=576,relief =GROOVE,**kwargs)        self.pack(fill=BOTH)        row_index = 1        # Description of the selected project        self.project_description_pg2 = Label(self, text="Project:",fg=foreground)        self.project_description_pg2.grid(row =row_index,sticky='E')        self.project_description_entry_pg2 = Entry(self,width=entry_size)        self.project_description_entry_pg2.insert(END, self.getItemDescription(project_item))        self.project_description_entry_pg2.grid(row =row_index,column =1,sticky='E')        # Author        row_index = row_index + 1        self.author_txt_pg2 = Label(self, text='Author:', fg=foreground)        self.author_txt_pg2.grid(row =row_index,sticky='E')        self.author_entry_pg2 = Entry(self, state=NORMAL,width=entry_size)        self.author_entry_pg2.insert(END, self.author)        self.author_entry_pg2.grid(row = row_index, column =1,sticky='E')        reference,revision,status = self.getDocInfo(project_item)        # Reference        row_index = row_index + 1        self.reference_txt_pg2 = Label(self, text='Reference:', fg=foreground)        self.reference_entry_pg2 = Entry(self, state=NORMAL,width=entry_size)        self.reference_entry_pg2.insert(END, reference)        self.reference_txt_pg2.grid(row =row_index,sticky='E')        self.reference_entry_pg2.grid(row = row_index, column =1,sticky='E')        # Revision        row_index = row_index + 1        self.revision_txt_pg2 = Label(self, text='Issue:', fg=foreground)        self.revision_entry_pg2 = Entry(self, state=NORMAL,width=entry_size)        self.revision_entry_pg2.insert(END, revision)        self.revision_txt_pg2.grid(row =row_index,sticky='E')        self.revision_entry_pg2.grid(row =row_index, column =1,sticky='E')        # Status        row_index = row_index + 1        self.status_txt = Label(self, text='Status:', fg=foreground)        self.status_entry = Entry(self, state=NORMAL,width=entry_size)        self.status_entry.insert(END, status)        self.status_txt.grid(row =row_index,sticky='E')        self.status_entry.grid(row =row_index, column =1,sticky='E')        # Build        row_index = row_index + 1        self.button_select_pg2 = Button(self, text='Build', state=NORMAL, command = self.click_build_sqap)        self.button_select_pg2.grid(row =row_index, column =1,pady=5,sticky='E')        # Modifications log        modification_log_text = self.getLastModificationLog(reference)        modif_log_frame = Frame(page, bg = '#80c0c0')        modif_log_frame.pack()        scrollbar = Scrollbar(modif_log_frame)        page.bind('<MouseWheel>', self.log_scrollEvent)        scrollbar.pack(side=RIGHT, fill=Y)        self.modif_log_label = Label(modif_log_frame, text='Modifications log:',fg=foreground)        self.modif_log_label.pack(fill=X);        self.modif_log = Text(modif_log_frame,wrap=WORD, yscrollcommand=scrollbar.set, width = 100, height = 10)        self.modif_log.pack()        scrollbar.config(command=self.modif_log.yview)        self.modif_log.insert(END, modification_log_text)    def _build_ccb_folder(self,page,**kwargs):        '''        Create folder for change requests        '''        global entry_size        global project_item        self.item = project_item        # Create top frame, with scrollbar and listbox        Frame.__init__(self, page, width=768, height=576,relief =GROOVE, **kwargs)        self.pack(fill=BOTH)        self.ccb_left = Frame(self)        self.ccb_left.pack(side=LEFT)        type_frame =Frame(self.ccb_left)        type_frame.grid(row =1,column =1, sticky='W')        row_index = 1        self.ccb_type_txt = Label(type_frame, text='CR type:', fg=foreground)        self.ccb_var_type = StringVar()        self.radiobutton_ex = Radiobutton(type_frame, indicatoron=0,width = 8,text="Customer", variable=self.ccb_var_type,value="EXCR",fg=foreground,command=self.excr_type)        self.radiobutton_sys = Radiobutton(type_frame, indicatoron=0,width = 8,text="System", variable=self.ccb_var_type,value="SyCR",fg=foreground,command=self.ccb_type)        self.radiobutton_eqpt = Radiobutton(type_frame, indicatoron=0,width = 8,text="Eqpt", variable=self.ccb_var_type,value="ECR",fg=foreground,command=self.ccb_type)        self.radiobutton_board = Radiobutton(type_frame, indicatoron=0,width = 8,text="Board", variable=self.ccb_var_type,value="SACR",fg=foreground,command=self.ccb_type)        self.radiobutton_hw = Radiobutton(type_frame, indicatoron=0,width = 8,text="Hardware", variable=self.ccb_var_type,value="HCR",fg=foreground,command=self.ccb_type)        self.radiobutton_pld = Radiobutton(type_frame, indicatoron=0,width = 8,text="PLD", variable=self.ccb_var_type,value="PLDCR",fg=foreground,command=self.ccb_type)        self.radiobutton_sw = Radiobutton(type_frame, indicatoron=0,width = 8,text="Software", variable=self.ccb_var_type,value="SCR",fg=foreground,command=self.ccb_type)        self.radiobutton_all = Radiobutton(type_frame, indicatoron=0,width = 8,text="All", variable=self.ccb_var_type,value="ALL",fg=foreground,command=self.ccb_type)        self.ccb_var_type.set("PLDCR") # initialize        self.ccb_type_txt.grid(row =row_index,sticky='E')        self.radiobutton_ex.grid(row =row_index, column =1, padx=10,sticky='W')        self.radiobutton_sys.grid(row =row_index, column =1, padx=75,sticky='W')        self.radiobutton_eqpt.grid(row =row_index, column =1, padx=140,sticky='W')        self.radiobutton_board.grid(row =row_index, column =1, padx=75,sticky='E')        row_index = row_index + 1        self.radiobutton_hw.grid(row =row_index, column =1, padx=10,sticky='W')        self.radiobutton_pld.grid(row =row_index, column =1, padx=75,sticky='W')        self.radiobutton_sw.grid(row =row_index, column =1, padx=140,sticky='W')        self.radiobutton_all.grid(row =row_index, column =1, padx=75,sticky='E')        context_frame =Frame(self.ccb_left)        context_frame.grid(row =2,column =1, sticky='W')        row_index = row_index + 1        # Description of the selected project        self.project_description_pg_ccb = Label(context_frame, text="Project:",fg=foreground)        self.project_description_pg_ccb.grid(row =row_index,sticky='E')        self.project_description_entry_pg_ccb = Entry(context_frame,width=entry_size)        self.project_description_entry_pg_ccb.grid(row =row_index,column =1,sticky='E')        # Author        row_index += 1        self.author_txt_pg_ccb = Label(context_frame, text='Author:', fg=foreground)        self.author_txt_pg_ccb.grid(row =row_index,sticky='E')        self.author_entry_pg_ccb = Entry(context_frame, state=NORMAL,width=entry_size)        self.author_entry_pg_ccb.insert(END, self.author)        self.author_entry_pg_ccb.grid(row = row_index, column =1,sticky='E')        reference = ""        revision = ""        status = ""        # Reference        row_index += 1        self.reference_txt_ccb = Label(context_frame, text='Reference:', fg=foreground)        self.reference_entry_ccb = Entry(context_frame, state=NORMAL,width=entry_size)        self.reference_entry_ccb.insert(END, reference)        self.reference_txt_ccb.grid(row =row_index,sticky='E')        self.reference_entry_ccb.grid(row = row_index, column =1,sticky='E')        # Revision        row_index += 1        self.revision_txt_ccb = Label(context_frame, text='Issue:', fg=foreground)        self.revision_entry_ccb = Entry(context_frame, state=NORMAL,width=entry_size)        self.revision_entry_ccb.insert(END, revision)        self.revision_txt_ccb.grid(row =row_index,sticky='E')        self.revision_entry_ccb.grid(row =row_index, column =1,sticky='E')        # Status        row_index += 1        self.status_txt = Label(context_frame, text='Status:', fg=foreground)        self.status_entry = Entry(context_frame, state=NORMAL,width=entry_size)        self.status_entry.insert(END, status)        self.status_txt.grid(row =row_index,sticky='E')        self.status_entry.grid(row =row_index, column =1,sticky='E')        # Build        row_index += 1        button_select_ccb = Button(context_frame, text='Build CCB minutes', state=NORMAL, command = self.click_build_ccb)        button_select_ccb.grid(row =row_index, column =1,pady=5,sticky='E')        # Add an action        button_add_action_ccb = Button(context_frame, text='Add action item', state=NORMAL, command = self.click_update_action_item)        button_add_action_ccb.grid(row =row_index, column =1,pady=5,padx=50,sticky='W')        row_index += 1        button_edit_action_ccb = Button(context_frame, text='List action items', state=NORMAL, command = self.click_list_action_item)        button_edit_action_ccb.grid(row =row_index, column =1,pady=5,padx=50,sticky='W')        # right panel        self.ccb_right = Frame(self)        row_index = 2        self.ccb_right.pack(side=LEFT)        self.status_in_analysis = IntVar()        self.status_in_review = IntVar()        self.status_under_modif = IntVar()        self.status_under_verif = IntVar()        self.status_fixed = IntVar()        self.status_closed = IntVar()        self.status_postponed = IntVar()        self.status_compl_analysis = IntVar()        self.status_canceled = IntVar()        self.status_rejected = IntVar()        self.status_all = IntVar()        state_frame = LabelFrame(self.ccb_right,text='Change requests state:')        state_frame.grid(row =row_index,column =2, padx=10,sticky='W')        self.check_button_status_in_analysis = Checkbutton(state_frame, text="In analysis", variable=self.status_in_analysis,fg=foreground)        self.check_button_status_in_review = Checkbutton(state_frame, text="In review", variable=self.status_in_review,fg=foreground)        self.check_button_status_under_modif = Checkbutton(state_frame, text="Under modification", variable=self.status_under_modif,fg=foreground)        self.check_button_status_under_verif = Checkbutton(state_frame, text="Under verification", variable=self.status_under_verif,fg=foreground)        self.check_button_status_fixed = Checkbutton(state_frame, text="Fixed", variable=self.status_fixed,fg=foreground)        self.check_button_status_closed = Checkbutton(state_frame, text="Closed", variable=self.status_closed,fg=foreground)        self.check_button_status_postponed = Checkbutton(state_frame, text="Postponed", variable=self.status_postponed,fg=foreground)        self.check_button_status_compl_analysis = Checkbutton(state_frame, text="Complementary analysis", variable=self.status_compl_analysis,fg=foreground)        self.check_button_status_canceled = Checkbutton(state_frame, text="Canceled", variable=self.status_canceled,fg=foreground)        self.check_button_status_rejected = Checkbutton(state_frame, text="Rejected", variable=self.status_rejected,fg=foreground)        self.check_button_status_all = Checkbutton(state_frame, text="All", variable=self.status_all,fg=foreground,command = self.click_status_all)        self.check_button_status_in_analysis.grid(row =row_index+1, column =2, padx=10,sticky='W')        self.check_button_status_in_review.grid(row =row_index+2, column =2, padx=10,sticky='W')        self.check_button_status_under_modif.grid(row =row_index+3, column =2, padx=10,sticky='W')        self.check_button_status_under_verif.grid(row =row_index+4, column =2, padx=10,sticky='W')        self.check_button_status_fixed.grid(row =row_index+5, column =2, padx=10,sticky='W')        self.check_button_status_closed.grid(row =row_index+6, column =2, padx=10,sticky='W')        self.check_button_status_all.grid(row =row_index+7, column =2, padx=10,sticky='W')        self.check_button_status_compl_analysis.grid(row =row_index+1, column =3, padx=10,sticky='W')        self.check_button_status_postponed.grid(row =row_index+2, column =3, padx=10,sticky='W')        self.check_button_status_rejected.grid(row =row_index+6, column =3, padx=10,sticky='W')        self.check_button_status_canceled.grid(row =row_index+5, column =3, padx=10,sticky='W')        self.ccb_type()        # Attributes panel        ccb_attributes = Frame(self)        ccb_attributes.pack()        # Attributes set        row_index += 1        if (0==1):            self.atributes_txt = Label(ccb_attributes, text='Attribute set:', fg=foreground,width=40,anchor=W,padx=20)            self.atributes_txt.grid(row = row_index, sticky='E')            row_index += 1            self.attributes_set_frame = Frame(ccb_attributes, bg = '#80c0c0')            self.attributes_set_frame.grid(row = row_index, padx=30,sticky='W')            self.vbar_attributes_set = vbar_attributes_set = Scrollbar(self.attributes_set_frame , name="vbar_attributes_set")            self.vbar_attributes_set.pack(side=RIGHT, fill=Y)            self.attributes_set_box = Listbox(self.attributes_set_frame ,height=3,width=30,exportselection=0,yscrollcommand=vbar_attributes_set.set)            self.attributes_set_box.pack()            vbar_attributes_set["command"] = self.attributes_set_box.yview            self.attributes_set_box.bind("<ButtonRelease-1>", self.select_attribute)            list_attributes = ["Default","Detected on","Implemented for","Applicable Since","None"]            for line_attribute in list_attributes:                self.attributes_set_box.insert(END, line_attribute)            self.attributes_set_box.selection_set(first=0)        # Previous release        row_index += 1        self.previous_release_txt = Label(ccb_attributes, text='Detected on release:', fg=foreground,width=40,anchor=W,padx=20)        self.previous_release_entry = Entry(ccb_attributes, state=NORMAL,width=entry_size)        self.previous_release_entry.insert(END, self.previous_release)        self.previous_release_entry.bind("<Return>", self._setPreviousRelease)##        self.previous_release_entry.bind("<FocusOut>", self._setPreviousRelease)##        self.previous_release_entry.bind("<Leave>", self._setPreviousRelease)        self.previous_release_txt.grid(row =row_index,sticky='E')        row_index += 1        self.previous_release_entry.grid(row =row_index,sticky='E')        # Implemented for release        row_index += 1        impl_release_txt = Label(ccb_attributes, text='Implemented for release:', fg=foreground,width=40,anchor=W,padx=20)        self.impl_release_entry = Entry(ccb_attributes, state=NORMAL,width=entry_size)        self.impl_release_entry.insert(END, self.impl_release)        self.impl_release_entry.bind("<Return>", self._setImplRelease)##        self.impl_release_entry.bind("<FocusOut>", self._setImplRelease)##        self.impl_release_entry.bind("<Leave>", self._setImplRelease)        impl_release_txt.grid(row =row_index,sticky='E')        row_index += 1        self.impl_release_entry.grid(row =row_index,sticky='E')        # CR type        row_index += 1        cr_type_txt = Label(ccb_attributes, text='CR type:', fg=foreground,width=40,anchor=W,padx=20)        self.cr_type_entry = Entry(ccb_attributes, width=entry_size,state=NORMAL)        self.cr_type_entry.insert(END, self.cr_type)        self.cr_type_entry.bind("<Return>", self._setCRType)##        self.cr_type_entry.bind("<FocusOut>", self._setCRType)##        self.cr_type_entry.bind("<Leave>", self._setCRType)        cr_type_txt.grid(row =row_index,sticky='E')        row_index += 1        self.cr_type_entry.grid(row =row_index,sticky='E')        #        # Button List CR        #        self.button_get_cr = Button(ccb_attributes, text='List CR', state=NORMAL, command = self.click_get_cr)        self.button_clear_cr = Button(ccb_attributes, text='Clear', state=NORMAL, command = self.click_clean_cr)        self.button_set = Button(ccb_attributes, text='Set', command = self.click_set_cr)        # Checkbuttons        self.log_on_var = IntVar()        self.cr_for_review_var = IntVar()        self.cr_with_parent = IntVar()        self.with_tasks_var = IntVar()        self.button_cr_for_review =  Checkbutton(ccb_attributes, text="Export CR for review report", variable=self.cr_for_review_var,fg=foreground,command=self.cb_cr_for_review)        self.button_log_on = Checkbutton(ccb_attributes, text="Log on", variable=self.log_on_var,fg=foreground,command=self.cb_log_on)        self.button_with_tasks = Checkbutton(ccb_attributes, text="With tasks", variable=self.with_tasks_var,fg=foreground,command=self.cb_with_tasks)        self.button_cr_with_parent = Checkbutton(ccb_attributes, text="With parent CR", variable=self.cr_with_parent,fg=foreground,command=self.cb_with_parent_cr)        row_index += 1        self.button_clear_cr.grid(row =row_index,sticky='E')        self.button_set.grid(row =row_index,pady=5,padx=40,sticky='E')        row_index += 3        self.button_log_on.grid(row =row_index,sticky='W')##        self.button_with_tasks.grid(row =row_index,sticky='E')        row_index += 1        self.button_cr_for_review.grid(row =row_index,sticky='W')        self.button_cr_with_parent.grid(row =row_index,sticky='E')        row_index += 3        self.button_get_cr.grid(row =row_index,sticky='E')        row_index += 1        list_cr_frame = LabelFrame(ccb_attributes,text="Change Requests found",bd=0)        list_cr_frame.grid(row =row_index,sticky='E')        sub_list_cr_frame = Frame(list_cr_frame)        sub_list_cr_frame.pack()        # crlistbox is updated thanks to RELOAD_CRLISTBOX keyword        self.crlistbox = Listbox(sub_list_cr_frame,height=5,width=64,exportselection=0,state=DISABLED,bg="gray",selectmode=EXTENDED)        self.crlistbox.insert(END, "All")        self.vbar_crlisbox = vbar_crlisbox = Scrollbar(sub_list_cr_frame, name="vbar_crlisbox")        self.vbar_crlisbox.pack(side=RIGHT, fill=Y)        vbar_crlisbox["command"] = self.crlistbox.yview        self.crlistbox["yscrollcommand"] = vbar_crlisbox.set        self.crlistbox.bind("<ButtonRelease-1>", self.select_cr_list)        self.crlistbox.bind("<MouseWheel>", self.crlistbox_scrollEvent)##        self.crlistbox.bind("<<ListboxSelect>>", self.crlistbox_onselect)        self.crlistbox.bind("<Double-Button-1>", self.crlistbox_onselect)        self.crlistbox.bind("<Key-Up>", lambda event, arg=self.crlistbox: self.up_event(event, arg))        self.crlistbox.bind("<Key-Down>", lambda event, arg=self.crlistbox: self.down_event(event, arg))        self.crlistbox.pack()    def crlistbox_scrollEvent(self,event):        if event.delta >0:            self.crlistbox.yview_scroll(-2,'units')        else:            self.crlistbox.yview_scroll(2,'units')    def crlistbox_onselect(self,event):        # Note here that Tkinter passes an event object to onselect()        cr_index = self.crlistbox.curselection()[0]        if cr_index != ():            cr = self.crlistbox.get(cr_index)            m = re.match(r'^([0-9]{1,4})\) (.*)$',cr)            if m:                cr_id = m.group(1)            else:                cr_id = "None"            print 'You selected CR %s: "%s"' % (cr_id, cr)    ##        webbrowser.open("http://spar-syner1.in.com:8600/change/framesetLoader.do?frameName=panelAndDialog&temp_token=792414148515128161")            self.queue.put("EXPORT_CR")            self.queue.put(cr_id)    def select_cr_list(self,event):        pass    def select_review_list(self,event):        pass    def reviewlistbox_scrollEvent(self,event):        if event.delta >0:            self.reviewlistbox.yview_scroll(-2,'units')        else:            self.reviewlistbox.yview_scroll(2,'units')    def reviewlistbox_onselect(self,event):        # Note here that Tkinter passes an event object to onselect()        w = event.widget        print "WIDGET:",w        review_index = self.reviewlistbox.curselection()        print"review_index",review_index        if review_index != () and review_index[0] != ():            review = self.reviewlistbox.get(review_index)            print review            m = re.match(r'^([0-9]{1,4})\) (.*)$',review)            if m:                review_id = m.group(1)            else:                review_id = "None"            print 'You selected review %s: "%s"' % (review_id, review)            self.review_qams_id = review_id            self.review_qams_id_entry.delete(0,END)            self.review_qams_id_entry.insert(END, review_id)##        webbrowser.open("http://spar-syner1.in.com:8600/change/framesetLoader.do?frameName=panelAndDialog&temp_token=792414148515128161")    def press_read_session_status(self,event):        ''' Read status of synergy session            CTRL + T '''        self.queue.put("READ_STATUS") # order to read session status    def press_close_session(self,event):        ''' Close synergy session            CTRL + W '''        self.queue.put("CLOSE_SESSION") # order to read session status    def press_ctrl_s(self,event):        ''' Read items and give scope            CTRL + S '''        self.queue.put("SCOPE")        self.queue.put(self.release)        self.queue.put(self.project)        self.queue.put(self.baseline)    def press_start_apache(self,event):        ''' Launch apache session            CTRL + H '''        self.queue.put("START_APACHE")        config= "httpd_ece.conf"        self.apache_start(config)        pass    def cid_type(self):##        print "CID type is '{:s}'".format(self.cid_var_type.get())        if self.cid_var_type.get() == "HCMR":            if self.hcmr_var_type.get() == "HCMR_PLD":                self.ccb_var_type.set("PLDCR")            elif self.hcmr_var_type.get() == "HCMR_BOARD":                self.ccb_var_type.set("HCR")            print "HCMR type is '{:s}'".format(self.hcmr_var_type.get())            self.radiobutton_hci_pld.grid(row =2, column =1, padx=10,sticky='W')            self.radiobutton_hci_board.grid(row =2, column =1, padx=10,sticky='E')        else:            if self.cid_var_type.get() == "SCI":                self.ccb_var_type.set("SCR")            self.radiobutton_hci_pld.grid_forget()            self.radiobutton_hci_board.grid_forget()    def excr_type(self):        # Customize EXCR workflow        self.check_button_status_in_analysis.configure(text="Entered")        self.check_button_status_under_modif.configure(text="In progress")        self.check_button_status_fixed.configure(text="Implemented")        self.check_button_status_postponed.configure(text="Workaround")        self.check_button_status_compl_analysis.grid_forget()        self.check_button_status_in_review.grid_forget()        self.check_button_status_under_verif.grid_forget()        self.check_button_status_canceled.grid_forget()        self.cr_activate_all_button()    def cr_activate_all_button(self):            self.check_button_status_in_analysis.config(state=NORMAL)            self.check_button_status_compl_analysis.config(state=NORMAL)            self.check_button_status_in_review.config(state=NORMAL)            self.check_button_status_postponed.config(state=NORMAL)            self.check_button_status_under_modif.config(state=NORMAL)            self.check_button_status_under_verif.config(state=NORMAL)            self.check_button_status_fixed.config(state=NORMAL)            self.check_button_status_closed.config(state=NORMAL)            self.check_button_status_canceled.config(state=NORMAL)            self.check_button_status_rejected.config(state=NORMAL)            self.check_button_status_all.config(state=NORMAL)    def cr_deactivate_all_button(self):            self.check_button_status_in_analysis.config(state=DISABLED)            self.check_button_status_compl_analysis.config(state=DISABLED)            self.check_button_status_in_review.config(state=DISABLED)            self.check_button_status_postponed.config(state=DISABLED)            self.check_button_status_under_modif.config(state=DISABLED)            self.check_button_status_under_verif.config(state=DISABLED)            self.check_button_status_fixed.config(state=DISABLED)            self.check_button_status_closed.config(state=DISABLED)            self.check_button_status_canceled.config(state=DISABLED)            self.check_button_status_rejected.config(state=DISABLED)            self.check_button_status_all.config(state=DISABLED)    def ccb_type(self):        # Set [X]CR workflow        row_index = 2        old_workflow = self.status_old_workflow.get()        if old_workflow == 1:            # Old workflow requested            self.check_button_status_in_analysis.configure(text="entered")            self.check_button_status_under_modif.configure(text="assigned")            self.check_button_status_fixed.configure(text="resolved")            self.check_button_status_postponed.configure(text="postponed")        else:            self.check_button_status_in_analysis.configure(text="In analysis")            self.check_button_status_under_modif.configure(text="Under modification")            self.check_button_status_fixed.configure(text="Fixed")            self.check_button_status_postponed.configure(text="Postponed")        self.check_button_status_compl_analysis.grid(row =row_index+1, column =3, padx=10,sticky='W')        self.check_button_status_in_review.grid(row =row_index+2, column =2, padx=10,sticky='W')        self.check_button_status_under_verif.grid(row =row_index+4, column =2, padx=10,sticky='W')        self.check_button_status_canceled.grid(row =row_index+5, column =3, padx=10,sticky='W')##        print "CCB type is '{:s}'".format(self.ccb_var_type.get())        if self.ccb_var_type.get() == "ALL":            self.check_button_status_in_analysis.deselect()            self.check_button_status_compl_analysis.deselect()            self.check_button_status_in_review.deselect()            self.check_button_status_postponed.deselect()            self.check_button_status_under_modif.deselect()            self.check_button_status_under_verif.deselect()            self.check_button_status_fixed.deselect()            self.check_button_status_closed.deselect()            self.check_button_status_canceled.deselect()            self.check_button_status_rejected.deselect()            self.check_button_status_all.deselect()            self.cr_deactivate_all_button()            self.checkbutton_all = False        else:            self.check_button_status_in_analysis.select()            self.check_button_status_compl_analysis.select()            self.check_button_status_in_review.select()            self.check_button_status_postponed.select()            self.check_button_status_under_modif.select()            self.check_button_status_under_verif.select()            self.check_button_status_fixed.select()            self.check_button_status_closed.select()            self.check_button_status_canceled.select()            self.check_button_status_rejected.select()            self.check_button_status_all.select()            self.cr_activate_all_button()            self.checkbutton_all = True    def cb_released(self):        print "variable 'Released' is", self.status_released.get()    def cb_active_release(self):        print "variable 'Active released' is", self.status_old_workflow.get()    def cb_log_on(self):        print "variable 'Log on' is", self.log_on_var.get()    def cb_with_tasks(self):        print "variable 'With tasks' is", self.with_tasks_var.get()    def cb_with_parent_cr(self):        print "variable 'With parent CR' is", self.cr_with_parent.get()    def cb_cr_for_review(self):        print "variable 'Export CR for review' is", self.cr_for_review_var.get()    def cb_integrate(self):        print "variable 'Intergrate' is", self.status_integrate.get()    def cb_old_workflow(self):        old_workflow = self.status_old_workflow.get()        if old_workflow == 1:            # Old workflow requested            self.check_button_status_in_analysis.configure(text="entered")            self.check_button_status_under_modif.configure(text="assigned")            self.check_button_status_fixed.configure(text="resolved")            self.check_button_status_postponed.configure(text="postponed")            self.check_button_status_closed.configure(text="concluded")        else:            # New workflow requested            self.check_button_status_in_analysis.configure(text="In analysis")            self.check_button_status_under_modif.configure(text="Under modification")            self.check_button_status_fixed.configure(text="Fixed")            self.check_button_status_postponed.configure(text="Postponed")            self.check_button_status_closed.configure(text="Closed")        print "variable 'Old CR workflow' is", old_workflow    def click_status_all(self):        print self.checkbutton_all        if self.checkbutton_all == False:            # checkbutton 'All' is selected            self.check_button_status_in_analysis.select()            self.check_button_status_postponed.select()            self.check_button_status_under_modif.select()            self.check_button_status_fixed.select()            self.check_button_status_closed.select()            self.check_button_status_rejected.select()            if self.ccb_var_type.get() != "EXCR":                self.check_button_status_canceled.select()                self.check_button_status_under_verif.select()                self.check_button_status_compl_analysis.select()                self.check_button_status_in_review.select()            else:                self.check_button_status_canceled.deselect()                self.check_button_status_under_verif.deselect()                self.check_button_status_compl_analysis.deselect()                self.check_button_status_in_review.deselect()            self.checkbutton_all = True            print "Select all"        else:            self.check_button_status_in_analysis.deselect()            self.check_button_status_compl_analysis.deselect()            self.check_button_status_in_review.deselect()            self.check_button_status_postponed.deselect()            self.check_button_status_under_modif.deselect()            self.check_button_status_under_verif.deselect()            self.check_button_status_fixed.deselect()            self.check_button_status_closed.deselect()            self.check_button_status_canceled.deselect()            self.check_button_status_rejected.deselect()            self.checkbutton_all = False            print "Deselect all"    def __del__(self):        # kill threads        pass    def click_event(self, event):        self.listbox.activate("@%d,%d" % (event.x, event.y))        index = self.listbox.index("active")        self.select(index)        self.on_select(index)        return "break"    def double_click_event(self, event):        index = self.listbox.index("active")        self.select(index)        self.on_double(index)        return "break"    menu = None    def select_attribute(self, event):        index = self.attributes_set_box.curselection()        if index in (0,()):            self.attribute = ""        else:            self.attribute = interface.attributes_set_box.get(index)        self.log("Selected CR filter attribute: " + self.attribute,False)    def select_item(self, event):        item_id = self.itemslistbox.curselection()        self.item_id = item_id        if item_id != () and '0' not in item_id:            self.item = self.itemslistbox.get(item_id)            description = self.getItemDescription(self.item)            cr_type = self._getItemCRType(self.item,self.system)            self.cr_type = cr_type            self.cr_type_entry.delete(0, END)            self.cr_type_entry.insert(END, cr_type)            self.ccb_var_type.set("SACR")            self.log("Selected item: " + self.item + ": " + description)            self.log("Selected CR type: " + self.cr_type)            # Re populate components_listbox            self.component = self.populate_components_listbox_wo_select(self.componentslistbox,self.item,self.system)        else:            self.log("No specific item selected")            self.component = self.populate_components_listbox_wo_select(self.componentslistbox,"",self.system)        self.defill()    def select_component(self, event):        ''' select component'''        component_id = self.componentslistbox.curselection()        if component_id != () and '0' not in component_id:            self.component = self.componentslistbox.get(component_id)            description = self.getComponentDescription(self.component)            cr_type = self._getComponentCRType(self.component)            self.cr_type = cr_type            self.cr_type_entry.delete(0, END)            self.cr_type_entry.insert(END, cr_type)            m = re.match("^(SW|PLD)_(.*)",cr_type)            if m:                if m.group(1) == "SW":                    self.radiobutton_hci_pld.grid_forget()                    self.radiobutton_hci_board.grid_forget()                    self.ccb_var_type.set("SCR")                    self.cid_var_type.set("SCI")                elif m.group(1) == "PLD":                    self.radiobutton_hci_pld.grid(row =2, column =1, padx=10,sticky='W')                    self.radiobutton_hci_board.grid(row =2, column =1, padx=10,sticky='E')                    self.ccb_var_type.set("PLDCR")                    self.cid_var_type.set("HCMR")                    self.hcmr_var_type.set("HCMR_PLD")            self.log("Selected component: " + self.component + ": " + description)            self.log("Selected CR type: " + self.cr_type)        else:            self.log("No specific component selected")        self.defill()    def double_click_system(self, event):        pass    def list_items(self):        self.queue.put("LIST_ITEMS") # action to get items according to release or project        self.queue.put(self.release)        self.queue.put(self.project)        self.queue.put(self.baseline)    def _find_release_vs_baseline(self):        self.queue.put("GET_RELEASE_VS_BASELINE") # action to get projects        self.queue.put((self.baseline))    def select_baseline_prev(self, event):        index = self.baselinelistbox_1.curselection()        if index in (0,()):            baseline = ""        else:            baseline = self.baselinelistbox_1.get(index)            self.button_make_diff.configure(state=NORMAL)        self.baseline_prev = baseline    def select_baseline_cur(self, event):        index = self.baselinelistbox_2.curselection()        if index in (0,()):            baseline = ""        else:            baseline = self.baselinelistbox_2.get(index)            self.button_show_baseline.configure(state=NORMAL)            self.setBaselineSynergy(baseline)        self.baseline_cur = baseline    def log(self,text="",display_gui=True):        '''        Log messages        '''        self.loginfo.info(text)##        print time.strftime("%H:%M:%S", time.localtime()) + " " + text        if display_gui:            self.general_output_txt.insert(END, time.strftime("%H:%M:%S", time.localtime()) + " " + text + "\n")    def defill(self):        self.general_output_txt.see(END)    def logrun(self,text,display_gui=True):        '''        Log messages        '''        self.loginfo.info(text)        if display_gui:            self.general_output_txt.insert(END, time.strftime("%H:%M:%S", time.localtime()) + " " + text)    def __find_partnumber(self):        # Display part numbers        if self.standard != "":            if self.dico_list_pn != {}:                self.pnlistbox.delete(0, END)                if self.standard != "All":                    print self.standard                    print "TEST2"                    self.pnlistbox.insert(END, "All")                    if self.dico_std_vs_pn.has_key(self.standard):                        print "TEST3"                        if self.dico_list_stdac_vs_pn.has_key(self.standard):                            self.current_list_partnumber = self.dico_list_stdac_vs_pn[self.standard]                        else:                            self.current_list_partnumber = self.dico_std_vs_pn[self.standard]##                        print self.current_list_partnumber                        for pn in self.current_list_partnumber:                            self.pnlistbox.insert(END, pn)                else:                    self.current_list_partnumber = self.dico_list_pn.keys()                    self.display_partnumber()                self.find_releases()                self.pnlistbox.configure(bg="white")                self.pnlistbox.selection_set(first=0)    def getBaseline(self):        '''        Get baseline which may be:            - A standard            - A Part Number            - A Synergy release        '''        return(self.baseline_change)    def select_standard(self, event):        '''        Select standard        Find related Part number        Display baseline to applied for Change query        '''        index = self.stdlistbox.curselection()        if index in (0,()):            self.standard = ""            self.partnumber = ""            self.log("All standards selected")        else:            self.standard = self.stdlistbox.get(index)            self.partnumber = "All"            if self.standard == "All":                self.log("All standards selected")            else:                self.log("Standard selected: " + self.standard)        self.general_output_txt.see(END)        self.__find_partnumber()        self.setBaseline(self.standard)    def select_partnumber(self, event):        '''        Select part number        Find related Synergy release        Display baseline to applied for Change query        '''        index = self.pnlistbox.curselection()        if index == 0 or index == ():            self.partnumber = ""            self.log("All Part Numbers selected")        else:            self.partnumber = self.pnlistbox.get(index)            if self.partnumber == "All":                self.log("All Part Numbers selected")            else:                self.log("Part Number selected: " + self.partnumber)        self.general_output_txt.see(END)        self.find_releases()        self.setBaseline(self.partnumber)    def make_menu(self):        menu = Menu(self.listbox, tearoff=0)        self.menu = menu        self.fill_menu()    def log_scrollEvent(self,event):##        print event.delta        if event.delta >0:##            print 'd�placement vers le haut'            self.general_output_txt.yview_scroll(-2,'units')        else:##            print 'd�placement vers le bas'            self.general_output_txt.yview_scroll(2,'units')    def log_upEvent(self, event):##        print event.delta##        print 'd�placement vers le haut'        self.general_output_txt.yview_scroll(-2,'units')    def log_downEvent(self, event):##        print event.delta##        print 'd�placement vers le bas'        self.general_output_txt.yview_scroll(2,'units')    def click_clear(self):        self.general_output_txt.delete(0.0, END)    def click_quit(self):        if tkMessageBox.askokcancel("Quit", "Do you really want to quit now?"):            if isinstance(thread_build_docx,ThreadQuery):                thread_build_docx.stopSession()##                if self.item != "":##                    context = self.item##                else:                context = self.system                thread_build_docx.storeSelection(self.project,context,self.release,self.baseline)##            else:##            self.storeSelection(self.project,thread_build_docx.item,self.release,self.baseline)##            if queue.empty():##                print "QUEUE EMPTY"##            else:##                print "QUEUE NOT EMPTY"##            queue.join()            self.destroy()            fenetre.destroy()    def click_logout(self):        if tkMessageBox.askokcancel("Log out", "Do you really want to log out?"):            thread_build_docx.stopSession()            thread_build_docx.storeSelection(self.project,thread_build_docx.system,self.release,self.baseline)            self.destroy()            fenetre.destroy()    def click_cancel_build_cid(self):        global cancel_build        cancel_build = True        print "Abort CID generation."    def getCIDType(self):        cid_type = self.cid_var_type.get()        if cid_type == "HCMR":            if self.hcmr_var_type.get() == "HCMR_PLD":                cid_type = "HCMR_PLD"            elif self.hcmr_var_type.get() == "HCMR_BOARD":                cid_type = "HCMR_BOARD"        return cid_type    def click_build_cid(self):        '''        Function which put        - author        - reference        - revision        - release        - project        - baseline        - status_released        - status_integrate        into the queue        called when the user press the Build button        '''        # Get author        author = self.author        # Get reference        reference = self.reference_entry.get()        if reference == "":            reference = "TBD"        # Get revision        revision = self.revision_entry.get()        if revision == "":            revision = "TBD"        part_number = self.part_number_entry.get()        board_part_number = self.board_part_number_entry.get()        checksum = self.checksum_entry.get()        dal = self.dal_entry.get()        previous_release = self.previous_release_entry.get()        revision = self.revision_entry.get()        # Get baseline        baseline = self.baseline        # Get release        release = self.release        # Get project        project = self.project        # Get aircraft##            aircraft = self.aircraft        # Get item        # Get project and database listbox information        self.queue.put("BUILD_CID") # order to build docx        self.queue.put([author,                        reference,                        revision,                        release,                        project,                        baseline,                        self.status_released.get(),                        self.status_integrate.get(),                        self.getCIDType(),                        self.item,                        part_number,                        checksum,                        dal,                        board_part_number,                        previous_release])    def click_make_baseline_diff(self):        self.queue.put("MAKE_DIFF") # order to make diff        self.queue.put([self.baseline_prev,self.baseline_cur])    def click_show_baseline(self):        self.queue.put("SHOW_BASELINE") # order to make diff        self.queue.put([self.baseline_cur])    def click_list_tasks(self):        '''         Order to list tasks in the release or baseline        '''        self.queue.put("LIST_TASKS")        self.queue.put(self.release)        self.queue.put(self.baseline)    def click_list_history(self):        '''         Order to list history in the release or baseline        '''        self.queue.put("LIST_HISTORY")        self.queue.put(self.release)        self.queue.put(self.baseline)        self.queue.put(self.project)    def click_send_cmd(self):        '''        Function which put SEND_CMD in the queue        to execute Synergy CLI command written in        the Synergy command text area        '''        self.queue.put("SEND_CMD") # order to send synergy CLI    def click_build_sqap(self):        '''        Function which put        - author        - reference        - revision        into the queue        called when the user press the Build button        '''        # Get author        author = self.author        # Get reference        reference = self.reference_entry_pg2.get()        if reference == "":            reference = "TBD"        # Get revision        revision = self.revision_entry_pg2.get()        if revision == "":            revision = "TBD"        self.queue.put("BUILD_SQAP") # order to build docx        self.queue.put([author,reference,revision])    def click_build_ccb(self):        '''        Function which put        - author        - reference        - revision        - release        - baseline        - project        - cr type        into the queue        called when the user press the Build button        '''        # Get author        author = self.author        # Get reference        reference = self.reference_entry_ccb.get()        if reference == "":            reference = "TBD"        # Get revision        revision = self.revision_entry_ccb.get()        if revision == "":            revision = "TBD"        self.queue.put("BUILD_CCB") # order to build docx        self.queue.put([author,reference,revision,self.release,self.baseline,self.project,self.ccb_var_type.get(),self.previous_release,self.impl_release])    def click_get_cr(self):        '''        Function which put        - GET_CR command        - baseline        - cr type        into the queue        called when the user press the "List CR" button in folder "Change Requests query"        '''        self.queue.put("GET_CR") # order to get CR        self.queue.put([self.getBaseline(),self.ccb_var_type.get()])    def click_clean_cr(self):        self.previous_release_entry.delete(0,END)        self.impl_release_entry.delete(0,END)        self.cr_type_entry.delete(0, END)        self.previous_release = ""        self.detect_cr.configure(text="")        self.impl_release = ""        text = "Clean CR implemented in release and CR detected in release and CR_type."        self.impl_cr.configure(text="")        self.target_release_entry.delete(0,END)##        self.cr_type_entry.configure(text="")        self.cr_type = ""        self.log(text)        self.defill()    def click_set_cr(self):        self._setPreviousRelease()        self._setImplRelease()        self._setCRType()class Console(Interface,Tool):    def getTypeWorkflow(self):        return False    def defill(self):        pass    def log(self,text,display_gui=False):        Interface.log(self,text,False)    def _readConfig(self):        Interface._readConfig(self)    def __init__(self, master,queue,system,item, **kwargs):        global item_id##        self.tk = master        self.std_exists = False        self.current_list_partnumber = []        self.dico_std = {}        self.checkbutton_all = False        # read config file        self.default_template_type = "SCI"        self.reference = "" #"ET1234-V"        self.revision = "" #"1D1"        self.release = ""        self.baseline_change = ""        self.baseline = ""        self.previous_baseline = ""        self.project = ""        # Read config        self._readConfig()        # Set logging        self.loginfo = logging.getLogger(__name__)        if self.verbose == "yes":            out_hdlr = logging.FileHandler(filename='docid_cli.log')        else:            out_hdlr = logging.StreamHandler(sys.stdout)        out_hdlr.setFormatter(logging.Formatter('%(asctime)s %(message)s'))        out_hdlr.setLevel(logging.INFO)        self.loginfo.addHandler(out_hdlr)        self.loginfo.setLevel(logging.INFO)        self.loginfo.debug("NO")        self.system = system        self.item = item        self.cr_type = ""        # Get        #       - Database        #       - Aircraft        #        if self.item != "":            self.database,self.aircraft = self.get_sys_item_database(self.system,self.item)            if self.database == None:                self.database,self.aircraft = self.get_sys_database()        else:            self.database,self.aircraft = self.get_sys_database()        self.standard = ""        self.partnumber = "" # Warning, P/N managed by the listbox pnlistbox in the GUI class##        self.board_part_number = ""        self.item_id = item_id        self.session_started = False        self.queue = queue        self.project_list = []        self.attribute = "CR_implemented_for"##        self.release_list = []##        self.baseline_list = []        self.type_cr_workflow = "None"def destroy_app():    global thread_build_docx    if tkMessageBox.askokcancel("Quit", "Do you really want to quit now?"):        thread_build_docx.stopSession()        thread_build_docx.storeSelection(thread_build_docx.master_ihm.project,thread_build_docx.item,thread_build_docx.master_ihm.release,thread_build_docx.master_ihm.baseline)        thread_build_docx.stop()##        interface.destroy()        fenetre.destroy()if __name__ == '__main__':    no_start_session = False    try:        # command line option ?        import argparse        parser = argparse.ArgumentParser()        parser.add_argument("--cli", help="launch doCID in command line input mode",action="store_true")        parser.add_argument("-system", help="System")        parser.add_argument("-item", help="Item")        parser.add_argument("-release", help="Target release")        parser.add_argument("-cr_type", help="Component selected (ex: SW_ENM etc.)")        parser.add_argument("-baseline", nargs='?', help="Baseline selected (ex: SW_ENM_02_06 etc.)")        args = parser.parse_args()        if args.cli:##            text = "Launching doCID in CLI mode"##            sys.stdout.write(text + '\n')##            sys.stdout.write("Implemented for: " + args.release + '\n')##            sys.stdout.write("CR scope: " + args.cr_type + '\n')##            sys.stdout.write("System: " + args.system + '\n')##            sys.stdout.write("Item: " + args.item + '\n')            # Begin DoCID in GUI mode            no_start_session = False            session_started = False            project_item = ""            system = args.system #"Dassault F5X PDS"            item = args.item #"ESSNESS"            item_id = 1            list_projects = []            login_success = False            # Verify if the database SQLite exists            try:                with open('docid.db3'):                    pass            except IOError:                print 'SQLite database does not exists.'                tool = Tool()                tool.sqlite_create()             # instance threads            queue = Queue.Queue()##            fenetre = Tk()            interface = Console("",queue,system,item)            interface.cr_type = args.cr_type            interface.previous_release = "" # detect_release            interface.impl_release = args.release            interface.baseline = ""            interface.project = ""##            print "Instantiate ThreadQuery\n"            thread_docid = ThreadQuery("doc",interface,queue)            if thread_docid.launch_session:                # Wait Synergy session begin##                print "Wait Synergy session begin\n"                while not session_started and not thread_docid.start_session_failed:                    pass                if not thread_docid.start_session_failed:##                    print "ARG",args.baseline                    if args.baseline != None:                        output = thread_docid._getItems(args.release,args.baseline)                        text  = "List of objects exported."                        print output##                        print "Launch Synergy get objects query\n"                    else:                        output = thread_docid._getCR("","SCR")                        text  = "List of CR exported."                        print output##                        print "Launch Synergy get cr query\n"                    test_log = open("test.log", "w")                    message = text                    test_log.write(message)                    test_log.close()                else:                    print "Synergy session login failed\n"            sys.stdout.flush();        else:            # Begin DoCID in GUI mode            session_started = False            project_item = ""            system = "None"            list_projects = []            login_success = False            # Verify if the database SQLite exists            try:                with open('docid.db3'):                    pass            except IOError:                print 'SQLite database does not exists.'                tool = Tool()                tool.sqlite_create()    ##        verrou = threading.Lock()            login_window = Tk()    ##        gui = Gui()            Pmw.initialise(login_window)            login_window.iconbitmap("qams.ico")            login_window.title("Login")            login_window.resizable(False,False)            # Create login interface            interface_login = Login(login_window)            if interface_login.auto_start:                interface_login.click_bypass()                login_window.destroy()            else:                # create a toplevel menu                mainmenu = Menu(login_window)                menubar = Menu(mainmenu)    ##            menubar.add_command(label = "Help", command=gui.help)    ##            menubar.add_separator()    ##            menubar.add_command(label = "Quit", command=interface_login.click_quit)    ##            mainmenu.add_cascade(label = "Home", menu = menubar)    ##            mainmenu.add_command(label = "About", command=gui.about)                # Bind control keys                mainmenu.bind_all("<Control-b>", interface_login.press_bypass_start_session)                mainmenu.bind_all("<Control-h>", interface_login.press_start_apache)                # display the menu                login_window.configure(menu = mainmenu)                # infinite loop                interface_login.mainloop()            # Login succeeded ?            if login_success:        ##        sys.exit()                fenetre = Tk()                #                # Tk =====> Gui                #    =====> ThreadQuery                #                Pmw.initialise(fenetre)                fenetre.iconbitmap("qams.ico")                fenetre.title("doCID: Just create a configuration index document in one click")                # enable height window resize                fenetre.resizable(False,False)                 # instance threads                queue = Queue.Queue()                #                # Queue =====> Gui                #       =====> ThreadQuery                #                gui = Gui(fenetre,queue,system,item)                # gui instanciates class Interface by "interface" which is global ... not cool                # gui creates a "notebook" with "fenetre" then                #     creates an "interface" with "notebook"                #                # Gui =====> Interface                #                thread_build_docx = ThreadQuery("doc",                                                gui.ihm,                                                queue,                                                no_start_session=no_start_session,                                                login=login,                                                password=password)                # fenetre is just used here for polling processIncoming                # See: self.master.after(1000, self.periodicCall)                #                # ThreadQuery <===== Interface                #             =====> BuildDoc                #                # create a toplevel menu                mainmenu = Menu(fenetre)                menubar = Menu(mainmenu)                menubar.add_command(label="Change Requests query", command=gui.ihm.ccb_minutes)                menubar.add_separator()                menubar.add_command(label="Create Plan Review minutes", command=gui.ihm.plan_review_minutes)                menubar.add_command(label="Create Specification Review minutes", command=gui.ihm.spec_review_minutes)                menubar.add_separator()                menubar.add_command(label="Reload config file", command=gui.ihm.click_update_config)                menubar.add_command(label="Reload PN csv file", command=gui.ihm.click_update_pn_csv)                menubar.add_separator()                menubar.add_command(label="Log out", command=gui.ihm.click_logout)                menubar.add_separator()                menubar.add_command(label="Quit", command=gui.ihm.click_quit)                mainmenu.add_cascade(label="Home", menu = menubar)                mainmenu.add_command(label="About", command=gui.about)                mainmenu.add_command(label="Help", command=gui.help)                # Bind control keys                mainmenu.bind_all("<Control-s>", gui.ihm.press_ctrl_s)                mainmenu.bind_all("<Control-t>", gui.ihm.press_read_session_status)                mainmenu.bind_all("<Control-w>", gui.ihm.press_close_session)                mainmenu.bind_all("<Control-h>", gui.ihm.press_start_apache)                # display the menu                fenetre.configure(menu = mainmenu)                # --------------------------                # to bind the window manager's CLOSE event to a fn                # --------------------------                fenetre.protocol( "WM_DELETE_WINDOW", destroy_app )                #                # Start thread ThreadQuery                #                thread_build_docx.start()                #                # Start GUI Interface                #                gui.ihm.mainloop()    except OSError as e:        print >>sys.stderr, "Execution failed:", e